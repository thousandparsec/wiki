This tutorial will show you how to make a simple AI for MTSec using python and Daneel-ai.


== Step 0: requirements ==

TP stuff:

* [http://www.thousandparsec.net/tp/download-instructions.php?product=daneel-ai&platform=developer daneel-ai] from the repository
* [http://www.thousandparsec.net/tp/downloads.php?category=server tpserver-cpp]
* [http://www.thousandparsec.net/tp/downloads.php?category=client tpclient-pywx] recommended

Other stuff:

* text editor or IDE (I used [http://www.eclipse.org/ eclipse] with [http://pydev.org/ pydev plugin])
* python

== Step 1: ruleset files ==

First we will create some ruleset files.

* create a new file in the rules folder of daneel-ai for your ruleset (we will call it mtsec-simple in this tutorial)
* copy this into the newly created file
 [Modules]
 basic
 mod-mtsec-simple
 
 [Constraints]
 
 [Rules]
 
 [Functions]
 

* create a new file in the daneel folder of daneel-ai (we will name it mod-mtsec-simple.py in this tutorial)

== Step 2: generate code ==

Now we will generate all the code to get you started and put it in the file we created in the previous step.

* Start the tpserver-cpp with the desired ruleset (MTSec in this tutorial).

 tpserver-cpp -v -C quickstart-mtsec.conf

* Run daneel-ai with the ruleset set to codeGenerator

 daneel-ai.py -f codeGenerator -u dummy:dummy@localhost/tp

Output of daneel-ai between "LIST OF POSSIBLE ORDERS" and "END OF LIST OF POSSIBLE ORDERS" is a list of all possible orders for this ruleset with their descriptions and is there to help you understand orders.

* Now copy all the output of daneel-ai between "LIST OF POSSIBLE ORDERS CODE" and "END OF LIST OF POSSIBLE ORDERS CODE" into mod-mtsec-simple.py we created in the previous step.

== Step 3: write AI code ==

Your AI should go into the AICode() function in the file mod-mtsec-simple.py

 def AICode():
     #TODO your AI code comes here
     return

To make your life easier there are a lot of helper functions in helper.py (in daneel folder of daneel-ai). Code generator already imported this file for you so you can start using it. Be sure to check it out.

Usage example:
 #this will print some information about your fleets
 for fleet in helper.myFleets():
     print "My fleet with ID", fleet, "is named", helper.name(fleet)

A lot of functions are there to give you some information about the universe, designs or the ruleset.

=== Step 3.1: adding a new design ===

In MTSec you will have to make your own ship and weapon designs if you want to do anything useful.
The best way to get information about designs and components is to use the python client.

This is an example of a ship design that can be used for fighting and colonisation:
 #make a list of ship components
 components = []
 components.append([helper.componentByName("advanced battle scout hull"), 1])
 components.append([helper.componentByName("colonisation module"), 1])
 components.append([helper.componentByName("alpha missile tube"), 1])
 components.append([helper.componentByName("alpha missile rack"), 1])
 #add the design
 helper.addDesign("First ship", "its a ship", helper.categoryByName("ships"), components)
 #print information about our new design
 helper.printDesign("First ship")

The only thing different for weapons is the category.

 #make a list of weapon components
 weaponComponents = []
 weaponComponents.append([helper.componentByName("alpha missile hull"), 1])
 weaponComponents.append([helper.componentByName("antimatter explosives"), 2])
 #add the design
 helper.addDesign("First weapon", "its a weapon", helper.categoryByName("weapons"), weaponComponents)
 #print information about our new design
 helper.printDesign("First weapon")

=== Step 3.2: resource information ===

=== Step 3.1: giving orders ===