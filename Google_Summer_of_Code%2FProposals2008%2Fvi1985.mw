== '''''Genetic Conquest''' (henceforth, GC)'', an AI Client for Thousand Parsec: Proposal ==

This document provides a general overview of the initial design concept of the AI client (GC) I want to design for Thousand Parsec. The AI agent will build on, and integrate with the libtpproto-java library, and hence will be written in Java as well. Upon completion, the AI Client will be able to successfully play the RFTS ruleset, and with slight modifications to its Ruleset module, GC will be able to play any other TP ruleset.

*Please feel free to make suggestions/corrections in the discussion section, and in the space provided below!!

== Goals ==

*Design and implement the AI agent for TP.
*Integrate it with the libtpproto-java library.
*Collaborate on completing the libtpproto-java library with jezuch.
*Create a convenient and comprehensive UI for the AI client.


== Timeline (Checkpoints) ==

*April 12 - My exams finish; Begin active study of libraries, ruleset, and other relevant materials.
*April-May - Finalize the design scheme.
*mid-May - Start coding.
*July 7 - Have AI agent ready in time for mid-term evaluations.
*August 11 - Complete AI agent-client library integration, and have a buffer week for "pencils down" date.


== Design Principles ==

'''General Execution Sequence:'''

* Turn start: receive "universe-picture" from server.
* Extract info from the universe picture.
* Compare with previous universe-picture, and generate a prediction of opponent actions.
* Run core genetic algorithm, which would return the set of actions to be performed this turn.
* Communicate actions back to server.


'''Core genetic algorithm'''

I chose a genetic algorithm (GA) for the implementation of the AI agent for several reasons. First of all, they are perfectly suited for the role in TBS games, since they involve a progressive refinement of "hypotheses", basically move-sequences, then returning a suitable "hypothesis", and not on-the-go heuristic decisions. Since it is looking many moves ahead, and considering the whole move-sequence at once, the solutions it comes up with aren't "quick-fixes", but genuine strategy. Together with a heuristic to predict opponent-moves, this algorithm will make the AI relatively sensitive to traps, and hard to fool. Another bonus is that the solutions it comes up with, will be genuinely creative ones, since there will be no hard-coded templates, or even heuristics, on which it will rely in decision making. This will ensure that it will always be a creative and unpredictable opponent! :-) Finally, a GA design will make the algorithm highly modular, and ensure quick transitions between rulesets. The main difficulty I expect to encounter, will be in making a good heuristic for predicting enemy moves. Careful analysis will have to be done to estimate what should a player do, based on its assets, and the positioning on the map relative to others. Then a small set of rules (possibly probabilistic ones!) will be extracted, and implemented as the "opponent-predictor" module.

'''The Evolutionary Paradigm'''

''Hypotheses:''

The GA will operate on "hypotheses", which are basically encoded move-sequences. Each such hypothesis will be a 3D array (x-axis: each move (1... search_depth); y-axis: action categories (1...last_category), e.g. development, purchasing, invading, etc.; z-axis: a uniquely-encoded set of actions (1...m) ). Such encoding ensures complete coverage, is compact and is easy to operate upon. Every point in the 3D array corresponds to some action, in some action-class, in some future move. In each hypothesis, the x and y-values (number of moves, action categories) will always be fixed, and the only thing that can change are z-values (according to some restrictions: you can only go to lev.4 ships, if you're at lev.3!), which again represent the possible actions for each action category, for each move. 

''Generations:''

The GA algorithm will start with an init_seed, which is a hypothesis. At the start of the game the init_seed will be random, then at each subsequent turn, the winning hypothesis of the previous turn will be modified to serve as the next turn's init_seed (the modification: shift all x-2D slices one to the left; randomly generate the last one). The init_seed will then mutate (z-values will randomly change in several random points, with compliance to restrictions), to create 3 generation_seeds. Each generation, there will be 3 generation_seeds, to preserve a variety of solutions, but on the other hand, not be too computationally-heavy. From each such generation_seed there will evolve three populations: a risk population (high mutation-rate, to seek creative solutions), a normal population (moderate mutation rate, for normal evolution), and a conservative population (low mutation rate, to preserve good solutions). Then, each hypothesis will be decoded, simulated, and evaluated. From each population, the best hypothesis will make it to the next selection (9 in all). To prevent loss of good solutions, the generation_seeds will automatically be added to this round of selection (total: 12). Then, the 3 best ones will be selected as the next generation_seeds. 

The process of making new generations will happen a fixed number of times, or until some hypothesis promises a win, and at the end returns the best one. Then, the actions specified in the first move of the hypothesis are sent back to the server for execution.

''Fitness function:''

A fitness function will be derived to give each hypothesis a numeric evaluation, by which they can be compared (e.g. higher = better, or closer to zero = better). This function will have as parameters the current stats of the AI player, its relative standing in the universe compared to others (number of planets, fleets, etc), and the winning conditions of the ruleset in question (here, RFTS).

== About me ==

My name is Victor Ivri (forum and IRC: vi1985... ok, I admit it's a lame nick! ;) ). I'm double majoring in Computer science and Cognitive science at York U, Toronto, Canada. My main interest is... AI! I'm interested in both practical implementations of various forms of AI, and in the philosophical and psychological underpinnings of it. I heard of genetic algorithms not too long ago in a Cognitive science conference, ran home, read about how it's done, and built a few (increasingly elaborate) examples myself. I'm really excited at this opportunity to participate in the development process of a 4X game, since I'm a huge fan of both TBS and RTS. I don't have a lot of time for game-playing at the moment (School has gotten harder, plus I found out interesting things tend to happen in the world outside!!), but I still occasionally meet with friends to play HMM3 into the night (or morning) :). 

I want to do this project because it is very interesting and challenging. I can only imagine the sigh of relief and satisfaction I'll have when it finally runs without bugs! (some 6 months from now...)  :)) . In the time elapsed since I first heard of TP (not more than a week!), I've had the pleasure to talk and exchange ideas with many of you, and I hope that our collaboration will continue into the future. Even more than that, I hope that you give me a chance to prove that my ideas and skills are an asset to Thousand Parsec.


Thanks for considering my proposal.

== Your Comments Here ==

///you are most welcome to ask for clarifications, give suggestions, or ask for missing info here, or in the discussion ///
