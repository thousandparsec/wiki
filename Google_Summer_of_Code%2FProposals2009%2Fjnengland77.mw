== Summary ==

The primary goal is to make a short game for those who are new to 4X gaming or just want a short game. I have two secondary goals. One is to replace the current pseudo-random number generator with the Boost implementation. This will allow me to understand how the server works and get interested in other parts of the project. Another goal is to help the developers by improving the ruleset development book for tpserver-cpp.

== Proposal ==


'''The Universe in an Hour'''

The primary goal is to produce a new ruleset that provides a short game. This will allow novice players to experience 4X gaming, while not being too in depth, confusing and long. However, it will allow the more experienced players to have a quick game when they're short on time. Developing the game will also aid one of the secondary goal -- improving the ruleset development book.

'''Content and Story'''

I would come up with a short story and base the game around that. I would probably bounce some ideas off my friends and the TP IRC channel, along with my GSoC mentor. I would also look into Konquest from KDE Games as the TP wiki suggested and see how it works (played once). I should also play game or two of any of the currently included rulesets to gain a better understanding of what the game play is like and what it’s currently capable of.

'''Keeping the game short'''

    * Turns
          o Timed turns
          o limit total gameplay time
    * Limit the amount micromanagement
    * Simple resource and money management
    * Victory
          o simple conquest
          o resource management

'''Game Details'''

The universe will be a finite number of planets. Each planet will have its own unique properties (type, resources, size, location within the universe ). The type can vary from primarily wasteland to more inhabitable planets. Which will determine the resources available. Resources will also be influenced by the size of the planet. The larger the planet the more resources are likely to be available.

The planets resources will be automatically mined after the player has taken control by defeating that planets defense (ships and planetary) or if the planet is unpopulated. The player can build gatherers to help mine more resources on that planet  (or possibly transport materials to other planets).  Unlike MTSec the player does not need to spend all of their resources every turn, and may let them build up.

Scouts and gatherers may see other planets resources if they near enough, and will become visible to that player ( possibly, for only for a few turns ). Scouts and gatherers are highly vulnerable and are the weakest armored of units. Scouts will be fast, but gatherers will be slow.

Ships will require certain resources to be built.  Some planets may not be able to build all ships. So you will need a ship to transport those resources. A gatherer can be built and will transport the materials; that way the planet will be able to build that ship.

There will be five ships (so far). Three of which will be battle ships. One will be a scout/spy. And the gather will help mine or transport the materials. All units will have health, firepower, armor, and speed. Some may have special attributes such as the gatherer who would need a capacity to carry materials.

Combat will likely be similar to MTSec, but simpler. A ship will have a certain amount of firepower, and the armor will take some of the damage till it's gone, and the ship will be destroyed. There could also be the option of who gathers the most materials within a certain amount of time, of course, you may still attack one another.

Since this is a short game in order to win you must either destroy all of the opponents planets or just their home planet.

If time permits I may include a tech tree to give upgrades or more options to the player. I have not had much time to think about this yet, but a tech tree might be too much.

'''Boost.Random'''

I intend on replacing the old pseudo-random number generator with the Boost implementation, Boost.Random. This will be used as a stepping stone to understand some of the internals of tpserver-cpp and get involved with other parts of the project. This part of the project should not take very long -- a max of three weeks.

Implementation

    * Understand how the current PRNG and Boost.Random (I’ve never worked with the Boost libraries before) work
    * Develop a class interface that matches the current PRNG
    * Develop the class
    * Test and compare it to the currently used PRNG
    * Finally rename the class to that of the old


Improving Ruleset Development Book

    * Add to and improve the tpserver-cpp ruleset development book
    * Give additional examples and expand existing ones
    * Further document features
    * I would attempt to add to this throughout the Summer

Timeline

   Goals for Weeks 1-2

    * Understand the current PRNG and Boost
    * Implement, test, and replace the old PRNG with Boost.Random
    * Think about specifications of the short game, along with a [background] story and a name for the game

   Goals for Weeks 3-5

    * Continue to refine specifications for the game
    * Reread ruleset and other documentation
    * Look at how other games work
    * Update documentation based on what I learned from the games
    * Set up basic file structure and framework for the game
    * Start setting up the universe (planets and how they provide resources)

   Goals for Weeks 6-9

    * Finish setting up the universe
    * Setup units
    * Setup how battles are going to be conducted

   Goals for Weeks 10-12

    * Fix bugs in the game
    * Proof read already written documentation
    * Work on documentation
    * Proof read it
    * Finish and polish code


Because I will be taking Summer courses I will not be able to put in as many hours for the first three-to-four weeks; however, I will put in 15-20 hours a week. Thereafter, I will invest 30 hours a week, and more if I feel like I'm behind schedule.

I will provide a weekly progress report on the mailing list to inform my mentor and the rest of the community. I'll state what I've accomplished for the week. Any doubts and questions I may have.

'''Importance'''

They could help draw more attention to the project. With the short game it’ll encourage beginners to play, and give them a short game into the world of 4X gaming. It’ll also fulfill the latter for the more advanced player, when they’re short on time.  Having good documentation can attract new developers and create more rulesets ( and thus more games to play ).

'''Aftermath'''

After GSoC is over I will try to make sure the game works as the tp server is updated and fix bugs I or others find.  If the game is not finished after GSoC there is still three weeks of Summer before school starts again (at least for me); so I will continue working on it, and hopefully finish the game.

== About myself ==
My name is Jordan Neumeyer. I’m attending South Dakota School of Mines and Technology (SDSM&T) for a bachelors degree in Computer Science. SDSM&T is located in Rapid City, SD, USA. I’m currently a sophomore, but will reach junior status after this semester. Most of my courses use C++ (and some C), and was taught assembly (Intel x86). Higher level courses will, of course, teach me other languages (A.I./Machine Learning: Scheme; Programming Language: scheme, Perl, and Java). I have also taught myself some of the basics in other languages from books and online resources, such as Python, BASH, and PHP. After taking course work I feel like I could relearn most of the those languages very quickly, and gain a better understanding of how that language works. I also help maintain a server, which hosts C&C mods and fan sites. There are four fairly large communities on the server (revora.net is probably the largest).

The Thousand Parsec project caught my eye, because over a year ago or so I was introduced 4X gaming with Dominions 3.  4X stood out and reminded me of Dominions 3 (and its 300 page manual) and I really enjoyed playing that game. I think creating a similar game would be fun. And overall The GSoC interested me as it provides a great opportunity to gain experience, and some additional funding for my schooling.

== Previous Projects ==
I have not contributed to an open source project before. Most of my computer science programs included two to four week projects. I have examples of previous projects you can look at http://jn.icetex-hosting.net/svn. There are many more that I’d didn’t use SVN for, but are available if you're interested in them.

== Comments ==
Improving the formating will help. You could make your proposal clearer by focusing on the big things (the ruleset), and mention the other smaller bits (the prng) as introductory tasks. Also, how will you keep your mentor and the rest of the community informed of your progress? How much time will you spend a week? --[[User:Lee Begg|Lee Begg]] 05:51, 1 April 2009 (EDT)
