Are you a developer who wishes to get started helping with Thousand Parsec? Perhaps you are a computer science student looking for a project that will help you improve your practical programming and teamwork skills? In any case, you have come to the right place.

Below are some of the ideas and suggestions for people who would like to join in the fun of creating video games. The list is not definitive and anyone is encouraged to come up with their own idea to work on. Initiative and imagination rate highly when working on any project.

For additional ideas you can also take a look at [http://sourceforge.net/tracker/?group_id=132078&atid=829724 Thousand Parsec TODO list].




= Clients =

Thousand Parsec is designed to allow many different clients to connect to the same server and still fully participate. Currently the [http://git.thousandparsec.net/gitweb/gitweb.cgi?p=tpclient-pywx.git;a=summary main client] is written in Python. There are also clients for [http://git.thousandparsec.net/gitweb/gitweb.cgi?p=parsek.git;a=summary KDE in C++] and [http://git.thousandparsec.net/gitweb/gitweb.cgi?p=galaxie.git;a=summary EFL in C].

You can help us by  writing a new client for Thousand Parsec. This client will service people who are not in a situation to use tpclient-pywx.

These tasks are a reasonable amount of work, depending on which language you choose you may need to improve (or implement from scratch) a protocol library. You will need to be a reasonable coder before you start any of these projects if you hope to succeed.

== Web based client ==

A web based client enables players to join Thousand Parsec games easily from any computer with a web browser and internet connection. This makes web based client the fastest and easiest way to start playing the game.

Any language could be used for the client. Some suggestions are PHP, Python or Ruby. It might be a good idea to use AJAX or something similar.

It is expected that the client has the following functionality:

* Support for displaying the Starmap
* Support for displaying all information about objects
* Support for issuing orders
* Support for creating designs

=== More Information ===
[http://git.thousandparsec.net/gitweb/gitweb.cgi?p=libtpproto-php.git;a=summary libtpproto-php],<br />
[http://git.thousandparsec.net/gitweb/gitweb.cgi?p=libtpproto-rb.git;a=summary libtpproto-rb],<br />
[http://git.thousandparsec.net/gitweb/gitweb.cgi?p=libtpproto-py.git;a=summary libtpproto-py]

=== Required Skills ===
Strong Web development skill.

== 3D Client ==

A cool 3D client for Thousand Parsec is needed. A [http://git.thousandparsec.net/gitweb/gitweb.cgi?p=tpclient-pyogre.git;a=summary pyOgre client] was started but is in need of quite a bit of love. You could choose to use that as a base or start a new client from scratch.

It is expected that the client has the following functionality:

* Support for displaying the Starmap
* Support for displaying all information about objects
* Support for issuing orders
* Support for creating designs

=== More Information ===
* For Python look at [http://python-ogre.org/ pyOgre], [http://panda3d.org/ Panda3D], [http://www.pyglet.org/ pyglet], [http://git.thousandparsec.net/gitweb/gitweb.cgi?p=libtpproto-py.git;a=summary libtpproto-py].
* For C++ look at [http://www.ogre3d.org/ Ogre 3D], [http://www.cegui.org.uk/wiki/index.php/Main_Page CEGUI], [http://git.thousandparsec.net/gitweb/gitweb.cgi?p=libtpproto-cpp.git;a=summary libtpproto-cpp]

=== Required Skills ===
* Some 3D development skills.
* Strong coding skills in language of choice.


== AI Clients ==

An AI client in Thousand Parsec games connects to the game as a normal client and has exactly the same information as a normal player would have. [http://git.thousandparsec.net/gitweb/gitweb.cgi?p=tpsai-py.git;a=summary tpsai-py] implements a some-what simple AI for Minisec. [http://git.thousandparsec.net/gitweb/gitweb.cgi?p=galaxie.git;a=summary EFL in C].
 Galaxie] also has an inbuilt AI. There are many improvements that could be made to these AI, and possibly made more generic so that they could be used with other rulesets.

=== More Information ===
* [http://git.thousandparsec.net/gitweb/gitweb.cgi?p=tpsai-py.git;a=summary Existing Python Simple AI].

= Servers =

[[tpserver-cpp]] is one of the main servers in Thousand Parsec. These project ideas deal with improving it in various ways.

You will need some C++ skills before you start any of these projects (but not as much as if you where implementing a ruleset for this server). [[User:Lee Begg|Lee]] (llnz) is happy to mentor anyone working in these areas.

== PostgreSQL persistence ==

Tpserver-cpp (C++ Thousand Parsec server) has an abstract persistence interface that allows different methods of saving the game data. Currently, only a basic MySQL module has been written.

The interface it fairly straight forward, but there is likely to be changes to the interface as the new game features are created and the internal architecture changes.

=== More Information ===
* [http://www.postgresql.org/ PostgresSQL]
* [http://sourceforge.net/tracker/index.php?func=detail&aid=1681326&group_id=132078&atid=829724 SF Todo Tracker Item].

=== Required Skills ===
SQL (preferably PostgreSQL and or MySQL) experience, C++ experience

== SQLite persistence ==

Tpserver-cpp (C++ Thousand Parsec server) has an abstract persistence interface that allows different methods of saving the game data. Currently, only a basic MySQL module has been written.

The interface it fairly straight forward, but there is likely to be changes to the interface as the new game features are created and the internal architecture changes.

=== More Information ===
* [http://www.sqlite.org/ SQLite]
* [http://sourceforge.net/tracker/index.php?func=detail&aid=1681330&group_id=132078&atid=829724 SF Todo Tracker Item].

=== Required Skills ===
* SQL (preferably SQLite or MySQL) experience, C++ experience

== Generic SQL persistence ==

It shouldn't be too hard to abstract a generic SQL persistence module for tpserver-cpp from the current MySQL persistence module that could be used with just about any SQL database. It would also mean less work in future to keep the persistence modules in sync with the core data models.

=== Required Skills ===
SQL experience, C++ experience

== Calendar Timer ==
tpserver-cpp supports plug-able methods for triggering the end of turn processing. The current TurnTimer supports threshold finished changing of the timer, which is set in seconds.

A new timer, called CalendarTimer could be developed that starts the EOT processing at the same calendar time (IE, everyday at 12:03am or similar).

== Rework Module System ==
tpserver-cpp module system works ok, but could be better. It could be just a matter of adding a layer of indirection in.

Some things that would be nice to have:
* Modules dependencies
* New types of modules (advertising methods, universe builders, etc)
* Load all modules, list their names on the console (on command), use some modules, unload rest.

== More useful fail frames ==
Fail frames as of TP04 have a list of General Purpose References. Most of the createFailFrame calls currently do not set the list of references. They need to be added.  Some things don't yet have reference types yet, they will also need to be added.




= Development Tools =

These projects are about improving or creating standalone tools for Thousand Parsec. They are the mostly self contain projects, however it is still expected that you be involved with the rest of the project.

Some of these projects might require you to extend the Thousand Parsec protocol or specify out new features. These will need to be public discussed on the mailing lists.

== Ruleset Development Environment ==

Scheme is quite a hard language to write. tpcl the language which is used for communicating between server and client the details about Designs, components and properties is based on Scheme.

For SoC 2007, DystopicFro wrote a Ruleset Development Environment called tpruledev. It is written in python, and works well for Designs, components and properties. But since then, there have been changes to tpserver-cpp that require reflecting in tpruledev, and some new features in TP04 are close to being useful and so could now be done inside tpruledev (namely Object Descriptions). So there are few improvements that could be made, and more are coming soon.

== Race Designer ==

Meet strange and interesting races... and kill them. One of the core tenants of the modern 4X game. Race design for Stars! is an art form, with few major race strategies (HP, HG, -F...), and dozens of minor variations. Other games feature fixed races - do you play the strange robotic machines, or the orange giant insects of Epsilon Persei III.

The goal for this project is to design and implement a protocol for player races. Protocol and server support are a necessity, as is a (portable) client that can create races in some way. Race files will need to be saved and distributed.. Take into account both fixed races (ala Master of Orion) or races built using another ruleset (ala Stars!). Also you will need to have at least one implementation of a game that uses the races in some way - easiest is Minisec, but if others are working on another project building a ruleset, you may work with them. Race files need to be verified in some manner on the server, so take into account how to do this easily.
More Information
	
=== Required Skills ===

== MetaServer ==

The metaserver was written in about 5 hours. It works but requires a lot of work before it's a "good" piece of software. It could also be rewritten in another language.

Some features would include:

* Implementing the full specification found in the discussion document
* Make it portable across databases
* Add RSS output support
* Produce statistics and some type of graphing
* "Back Connect" support for verification of details
* Some type of "match making" support

==== More Information ====
* [https://sourceforge.net/tracker/index.php?func=detail&aid=1652210&group_id=132078&atid=829724 1652210 - Add long term stats to Metaserver]
* [https://sourceforge.net/tracker/index.php?func=detail&aid=1652205&group_id=132078&atid=829724 1652205 - Add match making service to the Metaserver.]
* [https://sourceforge.net/tracker/index.php?func=detail&aid=1652204&group_id=132078&atid=829724 1652204 - Add RSS Feeds to the Metaserver.]
* [https://sourceforge.net/tracker/index.php?func=detail&aid=1652209&group_id=132078&atid=829724 1652209 - Clean up Metaserver code.]

==== Required Skills ====
	Some PHP skills (or other Web development skills).

'''Update:''' metaserver-lite-rewrite has most of the features above, but needs a little polish. It would be nice to have the rewrite as the active metaserver.

== Thousand Parsec Protocol ==

These projects are about improving a core part of Thousand Parsec. They may require a smaller amount of code then other projects, but the code will have to be of a much higher quality.

Any changes to the core protocol will need to be vetted by other Thousand Parsec members and approved. This means that these projects may be slower to progress and more frustrating. They will generally be more rewarding as you will know that you have helped with a fundamental part of Thousand Parsec and every one else is doing work based on yours.

=== Protocol compliance test suite ===

Currently protocol libraries have no way of testing their compliance with the protocol specification. Your job would be to write a suite which runs a protocol library through a bunch of tests and report on it's compliance.

==== More Information ====
* [http://www.thousandparsec.net/tp/dev/documents/protocol3.php Protocol 3]
* [http://www.thousandparsec.net/tp/dev/documents/protocol4.php Protocol 4], [http://www.thousandparsec.net/tp/dev/documents/protocolxml.php xml description]
* [http://git.thousandparsec.net/gitweb/gitweb.cgi?p=documents.git;a=summary Documents repository]

==== Required Skills ====
* Some experience with testing is a must




= Python Stuff =

Thousand Parsec uses a lot of python. These projects are generally to do with improve some python part of Thousand Parsec.

== Add testing to libtpproto-py ==

The python library currently as no testing. It's your job to write enough tests that at least 60% of the code has proper testing.

=== More Information ===
* libtpproto-py
=== Required Skills ===
* Some experience with unit testing and Python is a must

== Help develop wxWidget client ==

[http://www.thousandparsec.net/tp/downloads.php#tpclient-pywx tpclient-pywx] is currently the primary client for access Thousand Parsec, there are many things which can be done to improve it. Here are a bunch of suggestions,

===== Save window perspective =====
The client should restore all the windows to the same position/size/location. See the wxAUI demo for the window saving perspective code.

===== Improve info panel data display =====
The info panel is the primary display for information about the currently selected object. Currently it is really crappy looking. Make it look nicer.

===== "Distance to" window =====
Add a window which replaces the starmap and shows the distant from the currently selected object to every other object in the Universe. Should be able to filter and sort on various criteria. This would be useful for blind players to fully access the game.

===== Asset report =====
Add a window which lists all your various assets.

===== Add proper tech tree browser =====
TP04 will support technology trees. Add support for viewing these to tpclient-pywx.

FreeOrion has quite a cool looking tech-browser, see http://www.optisch-edel.de/fo/screenshots/research.jpg

===== Add message board functionality =====
Add full, proper message board support to tpclient-pywx.

Features should include;
* Ability to see all message boards on the server.
* The ability to post new messages.
* To easily filter various system messages in intelligent ways.
* Good searching facility.

== Improve wxWidget's pyAUI ==

The next version of tpclient-pywx, the primary Thousand Parsec client is heavily dependent on pyAUI. There are a bunch of improvements which could be added to make pyAUI even better. Some examples are,

* Minimise button support
* Add better way to align the windows initially
* Add better support for using floating MDI children under Windows
* Add support for "fly out" windows (IE Windows which only show themselves when moused over)
* Tab-based MDI classes (see C++ AUI)
* Vertical Title bars

Feel free to add more ideas, a good place to look is wxAUI Forums.
=== More Information ===
* PyAUI
* tpclient-pywx Development Branch

=== Required Skills ===
* Good Python skills is a must




= Rulesets =

Thousand Parsec's greatest strength is that it is a protocol for describing games, not a single game ruleset. Obviously then the more (complete) rulesets the better.

You can choose to implement the rulesets in either the Python Server or in the C++ Server. Both servers currently only implement MiniSec but have been designed to support a wide variety of other rulesets.

All these tasks will require C++ skills (if developing for the C++ Server) or Python (if developing for the Python Server). You may need to do some work on the core of the server if you are doing more advanced stuff too.

== MTSec ==

MTSec (short for Missile and Torpedo Wars) is a simple game designed to flex the ship and weapon design capabilities of Thousand Parsec. It is the first ruleset to have a simple economy and should be more interesting then the first prototype game MiniSec.

=== More Information ===

* [http://www.thousandparsec.net/tp/dev/documents/mtsec.php MTSec Documentation]
* [https://sourceforge.net/tracker/index.php?func=detail&aid=1678819&group_id=132078&atid=829724 SF Todo Tracker Item]

=== Required Skills ===
* C++ skills or Python skill.

== Reach for the Stars ==

In 1981 SSI released "Reach for the Stars", a classic in the 4X genre. The rules for the game itself were fairly simple - in the mechanics for everything except combat were in the rule book. It allowed up to 4 players, although it lacked decent network play (not a surprise -- the internet as we know it was quite a few years in the future).

TP is currently at a stage were most, if not all, of RFTS can be implemented in the current protocol. The game itself was balanced (by virtue of identical races) but had more then enough depth to keep players coming back.

The goal of this project is to implement RFTS as a TP ruleset in any server. Additionally you may need to make adjustments to a client to support it. The RFTS AI's are a challenge for the truly adventurous.

A new version of RFTS was released some years later. It also could be used as a ruleset, however it is a much more ambitous project, and would require a lot of work to expand the TP protocol.

=== More Information ===
* [http://en.wikipedia.org/wiki/Reach_for_the_Stars_%28computer_game%29 Wikipedia Page]
* [http://www.thousandparsec.net/wiki/TP_RFTS Thousand Parsec Wiki]

=== Required Skills ===
Good Python or C++ Skills

'''Update:''' xdotx in SoC 2007 wrote a RFTS clone for tpserver-cpp. Some of the more advanced rules have not yet been implemented. Also, some changes to the core of tpserver-cpp could make the ruleset code a little simpler.

== Diplomancy... In Space ==

One of the greatest board (and later computer) games is Avalon Hills Diplomacy game. Focusing on diplomacy between the players, forcing them to ally, lie, cheat, support and often backstab each other the game was (and is) a classic. Without the diplomacy aspect it becomes a fairly average war game - with the diplomacy aspect, it's simple support-based combat system, secret orders and general tight confines make for an engaging and deep gaming experience.

TP itself is missing some basic in turn messaging, but otherwise a ruleset using some of the ideas from Diplomacy to create fairly simple diplomatic game - in space could be done. Some work on how to turn adjacent countries/territories into space fleets need to done.

The goal of this project is to implement a Diplomacy style game - one focused on shifting alliances and political manoeuvring, rather then pure military might. Messaging between players will need to implemented in a server and client, and minor protocol adjustments will need to be made to allow messaging between players.

=== More Information ===
* [http://en.wikipedia.org/wiki/Diplomacy_%28game%29 Wikipedia Page]

=== Required Skills ===
* Good Python or C++ Skills

== New Rulesets ==

You could develop a new game from scratch. It is a lot of work though, and a lot of documentation should be created before coding. You could use tpruledev to simplify some of the design/component/property work.