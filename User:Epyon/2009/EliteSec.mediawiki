== Abstract ==

There were space games and there was Elite.

The goal of this assignment would be to create a ruleset for Thousand Parsec that would be in a similar spirit as the Elite series with inspirations from Traveller, Frontier, and other "me vs. the Galaxy" sources. Contrary to the typical TP ruleset, the player would not be in charge of vast fleets and owning many planets, but rather be based around a single ship, with the possibility of recruiting a small amount of helpers. To further make the proposal and game interesting, let's go the Elite way and generate content randomly, including, but not limited to planet positions, names and descriptions, trade routes, economical/political situations of planets, etc. The universe should feel alive without the players actions.

Each player starts just with his ship and a fistful of credits. From this point on he can pursue any career he'd like. Buying new ships, hiring escorts, and creating a trade empire by first buying offices at, and then whole space stations could allow him pursuing the trade path. Recruiting various scum, and traveling across known lanes would make him pursue the adventurous path of the pirate. But he should be wary that piracy is illegal, and sooner or later, a bounty would be placed on his head, either by fellow players, the police or the military. Another type of players could pursue the bounty hunter path, and try to catch those players with bounties.

Possibilities are endless, and the game can be brilliant, as long as we keep in mind the spirit of Elite/Traveller, and the fact that it should be a truly multiplayer game, allowing as much interaction between players as is possible in a turn-based environment.

== Deliverables ==

A ruleset module for TP implementing a interesting and balanced Space Exploration game. Also required extensions to the server, and proposals for enhancements to the protocol (if needed in the design). Along with the module I will deliver all it's datafiles, each one with solid and complete documentation for anyone wanting to do a modifications. I also plan to keep all the content generators (planet/ship names, planetary descriptions, system descriptions, events) in a separate universal module to allow re-usage of it by any TP-based game.

Additionally, one TP client will be chosen as the priority target for the ruleset. For it I plan to do all the neccessary improvements to handle the ruleset and also deliver a complete set of media needed to illustrate the game. Media will include textured, 3d engine ready, low-poly 3d ship/station/planet/weapon models, as well as 2D renders if need be.

== Design details ==

The following paragraphs describe the basic model of the game, IMHO achievable during the program timeframe. All code will however be written with expansions in mind.

=== Galaxy behaviour ===

The world will be fixed sized, generated and stored at start of the game. Following the KISS principle, initially there will be just one plane per system. Each world will have some suitable random description and parameters. Also each world will have one major (Empire, Alliance, Federation), and several minor affiliations.

The world will be updated each turn. Initial design idea is to have a fine turn granularity. Changes include random events ( not affected by player actions ), and changes due to player involvement. Several standard galaxy updates will be done per turn:

* update of the economy ( depending on what is sold/bought where )
* update of the political model 
* update of planetary data ( due to changes in politics )
* update of reputation data
* update of mission statuses
* creation of new world events/new missions

=== Turn lenght ===

Initial design idea is to make turns short, and to make actions last several turns. This would make for a casual game that you run in the background while doing other things, and only taking action once your long tasks are completed. Browser games of the like of OGame have prooven this model to be quite successful, and I also believe that this is a great model for an eventual future mobile or web-client. I also believe that such a model ( with the single-ship-focus added in ) would appeal to a wider audience than the current hardcode 4X players model.

=== Turn types ===

Depending on the players situation, turns allow for different actions. The basic situation in which the player can find himself are:

* '''hyperspace''' : the player can only gather information from nearby planets, observe the movement of nearby players and send messages. Maybe in a future version he will be able to control his holdings and henchmen, but the basic version doesn't implement that. The player is fully safe during hyperspace travel, but absolutely can't do any world actions (even stopping or reversing his journey)

* '''docking/interplanet''' : each arrival at a planet has a turn (maybe more?) during the player is already out of hyperspace, but not yet docked ( in the future, maybe there will be more docking places in a given system, then there will be one docking turn between them ). Similarily, each time the player picks a new system destination, the first turn is docking. This is the only turn type at which end combat can occur. Docking consumes fuel (if fuel is zero, the only action available is planet docking). 

* '''docked''' : player is docked at a planet. This allows the most actions, also the player is safe from attacks.

=== Turn actions ===

Available actions depend on what turn type the player is.

* '''Common actions''' ( available in all modes, free )
** check planet information if planet is in a given distance
** send message to other player
** read messages and newsfeeds (messages)

* '''Docking actions''' ( available only in interplanet mode, one per turn )
** attack a ship that is docking in the same system
** dock with planet
** choose a hyperjump destination
** use a jumpgate ( same as hyperjump but a lot faster, available only on selected routes )
** wait ( default action )

* '''Planet actions''' ( available only in docked mode, single per turn? )
** accept a mission
** perform a trade transaction ( buy or sell )
** preform a ship upgrade
** launch ( possibly with a set destination )
** wait ( default action )

=== Combat ===

Combat can occur only at the end of a players "docking" turn. Combat can be initiated by another player that is also docking, or by the server itself ( pirates, police if criminal, military, or other ). Combat has a random factor, generally however the ship with the stronger weapons does more damage, the ship with the better armor receives less damage ( strength may be affected by pilot skills if implemented ). Internally four factors determine the outcome of a battle:

* '''Hull status''' : a precentage value, representing the shape the ship is in
* '''Armor''' : the rate in which the ship looses hull status
* '''Shields''' : the amount of damage that the ship absorbes in a turn without loosing hull status
* '''Weaponary''' : the rate in which the ship deals damage

After combat the result is judged. The ship that lost more hull status is the looser, as long as the difference in the loss is relatively significant, hence a draw is possible. In case of draw, nothing happens, except hull loss. In case of a conclusion:

* if the looser is reduced to below 50% he risks having upgrades on the ship damaged
* if the looser is reduced to below 25% he risks having upgrades on the ship destroyed
* in normal mode game if the looser is reduced to 0% he makes an immidate planet dock, loosing all his cargo to the winner
* in case of a permakill mode game, if a looser is reduced to 0% he looses his ship, and unless he has money for a new one, he probably ends the game
* in case of a permadeath mode game, if a looser is reduced to 0% he ends game

=== Missions ===

Accepted missions can be checked any time. There's a limit to the amount of missions that one can have running at a given time, based on player rating and rating within the organization that assigns the mission. Missions have a time limit. Once a mission is assigned, it cannot be unassigned -- once the time limit ends the mission is considered failed (in some cases that has negative reputation effect, or even worse consequences). 

Mission targets, descriptions and conditions are randomly generated. Misson templates are coded in a scripting language. Missions may be assigned by planets (individual assignee) or by organizations. Example missions from the technical point of view:

* deliver [PACKAGE] from [PLANET] to [PLANET]
* deliver X [PERSON(S)] from [PLANET] to [PLANET]
* deliver X tons of [CARGO] to [PLANET]
* destroy [ENEMY(IES)] at [PLANET] on day [DAY]
* clear (destroy all enemies) systems [PLANET], [PLANET] and...
* bomb (survive a turn and return) system [PLANET]
* etc.

Where:

;PLANET
:Destination. To achieve the goal one needs to dock at the planet. The most common source place is the place where the mission is given.

;PACKAGE
:A mission specific object, that doesn't take space.

;PERSON
:Mission specific object, takes crew space (most players start with single-person ships without crew compartments).

;AMOUNT
:People take 1 crew space each, cargo takes one cargo space each.

;ENEMY
:A mission target, a "combat event" controlled by the server.

;DAY
:Each game turn is a single day in the game's calendar


The technical point of view doesn't reveal all info : a planet to planet person transfer may be a simple passanger, or may be a jailbreak (with the latter being filled with combat, and rating loss in some organizations/systems). Several such modifications are possible.

A mission has different definitions on when it's undertaken. In case of "from here" missons, this is immidate. In other situations there's a given place where it's undertaken (or even undertaking is equal to completion) -- in that case it may happen that multiple players race for the same mission. In case of a tie, the one with the higher rating for the given organization (or global rating in case of individual missions) gets priority.

Missions have a positive impact on income and may have a positive impact on reputation ( possibly within a organization ), but may also have negative impacts (especially illegal missions, and missions targeted against given organizations).

=== Goal ===

EliteSec in it's basic form would be definitively open-ended, as the original game was. With the simple model presented above that would make games that last longer probably boring after a time. However, there are many "late-game" ideas that could be added in the future.

However, the game will allow setting some "end-condition" at runtime, be it achieveing "Elite" ranking, gaining a set amount of money, killing all other players in permadeath mode ( mode where a destroyed player ends game ), or a simple time limit.

=== Single player ===

Due to the ship-based gameplay, the fact that the universe lives without the need of players, and that the game has a strong interaction between the player and the universe itself, this ruleset would be an ideal single-player game.

=== Gameplay example ===

== Implementation details ==

The ruleset will be developed in object oriented C++, making heavy use of boost (if allowed) and STL libraries. The model will be broken up into three (as much independent as possible) major components:

* '''Core''': the action handling/server implementation
* '''World''': the world representation, with a completely player/game independent model, and associated update algorithms
* '''Algorithms''': a library of fairly generic random generation algorithms (names, planet data, starmap, descriptions)

Data will be also divided into three separate components, each assigned to a specific component:

* '''Game data''': current state of the game and world, handled by a database
* '''Script data''': scripts controlling the dynamic aspects of the world (missions, etc.)
* '''Generation data''': data used only at server initialization, food for the Algorithms component
<!--
The following features will be included in the project, separated as much as possible for reusage:

* dynamical economy model (that wont allow abusing good trade routes)
* combat (it would have to be interesting, but still adhere to the turn count and hands-off principle -- probably allowing escapes and detailed ship damage)
* trade "empire" management (allowing the hiring of proxies to do stuff, allowing buying of immovable property, but on the other hand somewhat restricted, so the game doesn't turn into boring micromanagement)
* ships/ship upgrades (customization of ships would play a major role in the game, just as research plays in 4X games)
* special events (like disease outbreaks -- quarantine and rise of medicine price in a system, war -- hiring and dangerous to travel through, revolutions -- illegal arms smuggling for big profit, etc)
* information propagation (I really like nash's idea that information travels at lightspeed, so it's not instant. Information/rumors would spread from point of origin, and might come to the desired place too late)
* reputation -- one of the most important information types. Reputation travels even more slowly than information, so you may still be able to pass through a system where theoretically you should be considered an outlaw already...

The player will be able to choose a gameplay path, but will not be bound to it (he will be always able to change it at whim just by making other choices). This way the player will always find something interesting to do:

* trading -- the primary path, especially for the pacifist. Except of always searching new trade routes (old ones get less and less benefactory as economy adjusts itself to the action of the player), he has to fend off pirates, buy better ships and establish a trading empire. Of course you can always try to transport less then legal cargo...
* piracy -- the flip coin of the traders path -- you can pirate on passing spaceships by maintaining a good ship and some minions. Passing spaceships may include players too...
* bounty hunting -- where there are pirates there are also prices on their heads. The bounty hunter collects those. His enemies are both computer ships as well as player controlled entities. The shady side of the bounty hunter is of course the assassin, but he should watch out for...
* military -- you can also do missions for the one of the empires. Better not try to do them for more then one, or you may become a traitor.

This is just the tip of an iceberg, other occupations that may be thought about is scouting and mining, for example.

-->

== Project Schedule ==
<!--
I plan on working on the project fulltime during summer -- I have no summer job, nor school responsibilities. I plan to maintain a blog with progress update.

In the case of a ruleset implementation the first part of the development will be creating a complete and thought through design document of the ruleset that takes into account balance, fun and that is in the scope of the 2 months time (with a possible section on "further" improvements). The game realized in the 2 months timeframe must be complete, playable and fun. 

The design document will be finished before the official coding time starts, and will be presented to the community in the form of wiki pages that anyone can comment on. Design will be then finalized and frozen before the deadline of May 28. Also up to this date I assume to learn the details of the TP system in it's current shape, and submit proposals for enhancements if needed.

The design will define a midpoint project -- a PLAYABLE game with basic capabilities. At this point I will probably be trying to find playtesters so we can see how the game handles in real life.

The coding time will be divided into two parts -- first one will implement the midpoint project. At this point I start to run games and gather as much feedback/bug reports as possible to be included/fixed in the second part of the project. The second part will have new versions of the ruleset uploaded for testing at least weekly, and I'll be constantly monitoring feedback during this time (if the amount of people interested will be large I might need someone to help me organize all the stuff).
-->
== Brief Bio/Resume ==
<!--
I'm a Computer Science PhD student (1st year) at the Wroclaw University, Poland. My interests lie in Game Programming and Design, with a special hunch for Real-time Procedural Content. 

I've successfully taken part in last year's GSoC creating a Procedural City Generator for BZFlag ( project homepage, out of date, http://bzflag.chaosforge.org/ ).

I know several computer languages, tough I favor FreePascal (Delphi) and C++ that I currently write my own projects in. These include the beginnings of a 3D game engine ( http://sourceforge.net/projects/libvalkyrie ) in C++, and an unannounced space combat/trading game (codenamed StarDreamer), which heavily is inspired by Elite and Frontier. 

I am a big fan of roguelike games, due to their randomness, and the focus on gameplay over presentation. I have managed to write several roguelikes up to date, the most famous one of them being DoomRL ( http://doom.chaosforge.org ) that did even get mentions in contemporary gaming magazines. I also know how to do game designs and organize my time and work, having taken part in three 7DRL Competitions (aimed at writing a playable and fun roguelike game in 7 days), and managed to finish them successfully each time.

Rules design is something that I needed to learn well, because good, balanced and interesting rules were the only way to get attention to a roguelike game. I always given high value to user submission evaluation in my projects, what can be seen on my games' forum ( http://forum.chaosforge.org/ ).

* Homepage : http://chaosforge.org/ 
* IRC Nick : Epyon
-->
== Detailed timeline ==

A detailed timeline is hard to write without a good plan of implementation and an extended knowledge of the TP framework, hence this is just a guideline that is subject to change before May 23.

=== '''Preplanning''' (April 20 - May 23) ===

* detailed design document
* setting up the dev environment
* studying the C++ server and protocol library
* cleanup of the C++ server if needed
* picking a primary client
* basic artwork depending on the client

=== '''Milestone 1''' - June 14 -  ''(Mostly Harmless)'' ===
'''Goal:''' operability achieved

'''Length:''' 3 weeks

'''Deliverable:''' operational framework

* Week 1 : basic framework -- application framework, basic class structure, and the ability to handle connections, possibly Lua support, basic updates to the C++ server if needed.
* Week 2 : basic world generation (names, descriptions, systems, trade info), sending them to the client (and if necessary, changes to one of the clients)
* Week 3 : continuation of week two, client changes if needed, connection and data download

=== '''Milestone 2''' - July 5 - ''(Average)'' ===
'''Goal:''' basic playability

'''Length:''' 3 weeks

'''Deliverable:''' private-access alpha version

* Week 4 : basic orders (trade, movement, ship upgrades), economy and trade system, basic combat code
* Week 5 : events (combat events, planetary events, information events), event generation, message generation
* Week 6 : missions (random generation, descriptions, rewards, completion and progress checking)

=== '''Milestone 3''' - July 26 - ''(Deadly)'' ===
'''Goal:''' feature implementations

'''Length:''' 3 weeks

'''Deliverable:''' public beta version

* Week 7 : basic non-player organizations (generation, AI, ownage of systems, system conquering)
* Week 8 : reputation system, organization status and missions, additional roles
* Week 9 : setup for a public beta version, polishing updates, additional media

=== '''Milestone 4''' - August 10 - ''(Elite)'' ===
'''Goal:''' bugfixing, stability and RFE's

'''Length:''' 2 weeks

'''Deliverable:''' stable version

* Week 10 : bugfixing, feature requests, balance, additional media, etc.
* Week 11 : buffer week for eventual unexpected delays

=== Bonuses (if time allows) ===

* information propagation
* NPC helpers
* buying fixed world elements
* fixed world elements management

=== Aftermath (August 10+) ===

This is one of the games that if executed well always has room for improvement. If it will work, and start gaining players, I'm sure to work on it more (including maybe even a dedicated graphical client).