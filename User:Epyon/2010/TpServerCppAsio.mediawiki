== Abstract ==

boost::asio is the current cutting edge of C++ server development. Not only is it capable of running high performance servers on absurd load, it is also a very readable, portable and easily extendable framework for server development, and a candidate for inclusion in the standard library for the next C++ standard. 

Moving tpserver-cpp to boost::asio would have several advantages: 

* First of all an asynchronous model of operation would emerge, allowing to make the whole server act completely asynchronously in the future, allowing to take full advantage of modern hardware (multithreading, multicore) -- what would definitively increase the servers scalability, responsiveness and ability to handle multiple clients effectively.
* Secondly, that would allow for a much cleaner (and tested!) implementation of the network layer. 
* Finally tpserver-cpp network layer would become platform independent, using asio would remove the dependency on quite a few platform specific libraries.

== Project goals ==

=== Primary goal ===

* substitute tpserver-cpp network layer and connection classes with boost::asio code, on a single thread and single proactor instance

=== Secondary goals ===

* start work on thread support, by moving in locking a mutex as deep into tpserver-cpp as possible
* implement multi-thread support to the level achieved by the above
* refactor the code on the go with threading in mind

=== Bonus goals ===

* allow for complete thread safety by only mutexing the singleton entities (mainly the persistence module, the ruleset and global data)
* asses the possibility of full thread support also in the modules mentioned above
* try a cut down (without some additional features) compilation on Windows

== Implementation details ==

Doing last years [[User:Epyon/2009/TpServerCppRefactor|project]] i definitively underestimated the amount of work for a transition to boost::asio, also I didn't have much experience with ASIO itself. Now I know both ASIO better, as well as tpsever-cpp's internal structure. The amount of changes needed, especially if we want to support threading, is enormous. 

=== Porting to ASIO's networking model ===

The major goal is to take advantage of ASIO's network layer -- without thinking about threading in the beginning. This will need a rework of the Connection classes and of course mainly the Net class. The change wont be as smooth though, because several other features depend on the current network model. Timers will need to be implemented using ASIO's proactor as events (what in itself is a good thing indeed), also the metaserver connection and handling will need an overhaul. SSL handling on the other hand will be a lot simplified (although ASIO internally uses OpenSSL, it does a great job of hiding OpenSSL's ugly API). I've still no idea what to do with Avahi though.

=== Threading ===

Once that is done and tested as working the harder part will begin -- thread safety. It's no secret that tpserver-cpp is completely unsafe from threading point of view. Things that will need to be taken into account:

* persistence is a major blocker here -- probably will need to be mutexed on any operation, unless I'll find time to learn a little about mySQL and thread safety. 
* game and ruleset and other singletons -- they'll need to be mutexed at least on write operations. There's a big question here, whether we could make data stored per thread, what would simplify matters a lot, but would increase the load on persistence by the amount of threads -- design decision to be made with the rest of the team
* logging needs to be done in a single thread, hence there's a need to do thread-safe log calls

=== Further issues ===

Once at least a heavily mutexed threading model is up and working, time will come to take a look at the design and decide where we can push the concurrency line further. What data can be per-thread, what must be shared. Also probably here would be a good time to reinvestigate the persistence implementation.

== Project schedule ==

=== May 10 - May 23 (pre-planning) ===

=== May 24 - July 12 (phase 1) ===

=== July 13 - August 9 (phase 2) ===

=== August 9 - August 16 (cleanup) ===