This page should reflect what work has already been done on daneel-ai, what needs to be done, what I plan on doing and what obstacles I have encountered.

It is written by [[User:Null|Damjan "Null" Ko≈°ir]] and it will change as the work progresses.

I would appreciate any comments/suggestions/tips at the bottom of the page. Thanks.

== The big picture (what I am trying to do) ==

To get to know the code of daneel-ai I am trying to code an AI for MiniSec in python. For that I need to write ruleset specific code fro MiniSec and support functions for coding AI in python (in a way that it coexists with the CHR). For more information on why I think this is good check out my [[Google Summer of Code/Proposals2010/Null|Google Summer of Code proposal]].

== My plans for now ==

There should be a "hook" to start python AI code. There should be support functions for every common action you will need when coding AI.

I think there is a way to generate all ruleset specific code for giving orders. The available order information should be retrieved from the server and all code for giving orders from python and CHR should be generated.

Since I had some problems with the TP03 version of the client and TP04 is going to be used for future rulesets anyway I will try to make daneel-ai work with TP04 version of the libraries.

== What is already done ==
Daneel-ai was moved to TP04 (development) version of libtpclient and libtpproto. Getting information about the universe and giving orders using the new libs work.

=== Python AI code support ===
I have found a way to run python AI code without breaking CHR support. Python code is executed after CHR code so you can use CHR to pre process some of the data about the universe (such as classifying objects). In case you want to code AI just in CHR you can just leave the python function empty and it doesn't do anything.

I'm writing support functions for common tasks needed to code AI. Some of them can be MiniSec specific as I will separate them form the general ones later.

List of current python AI support functions:
* findNearestNeutralPlanet(fleetPosition) - gets the id of the nearest planet not owned by any player
* findNearestPlanetOwnedBy(fleetPosition,owners) - get the id of the nearest planet owned by any of the given players (-1 for neutral)
* allMyFleetIDs() - gets the ids of all fleets owned by the player
* allStarIDs() - gets the ids of all the stars in the univers
* allContainsIDs(id) - gets ids of all the objects the object with the given id contains (for instance all planets of the given star system)
* getPosition(id) - gets the position of the object with the given id
* getName(id) - gets the name of the object with the given id (fleet name, planet name, star name,...)
* getOwner(id) - gets the owners id of the given object (-1 for no owner)
* whoami() - gets the player id of our player
* turnNumber() - gets the number of the current turn
* allPlayers() - gets ids of all the players
* playerName(id) - gets the name of the player with the given id
* enemies() - gets the ids of all enemy players
* orderMove(id, destination) - give an order to the fleet with the given id to move to the given position. (MiniSec specific)
* orderColonise(fleetID) - give an order to colonise to the fleet with the given id
* allPlanetsOfAStar(starid) - gets all the ids of the planes in a star system
* printAboutMe() - prints some information about the AI player (player id, player name, list of enemies, list of owned fleets, list of owned planets
* allPlanetsOwnedBy(owners) - gets ids of all the planets owned by any of the given players (-1 for neutral)

Some of this do not always work, but I'm not sure if some of it is not caused by server returning weird/wrong data.

==== Comming soon... ====
I will implement these in the near future:
* getShipsInFleet() - gets the ids of all the ships in a fleet
* getTypeOfShip() - gets the type of ship (MiniSec specific)
* functions for other orders
* ...

=== Order code generation ===
I can already print a list of possible orders with descriptions and arguments (and their types and descriptions). I can generate CHR order descritions and python function signatures. I have obtained all the information needed to finish the code generation.

Example of an order printout (info and some code):




<code>Name: Move

Code: 1

Desc: Move to a given position absolute in space

Arguments: 

Arg name: pos	Arg type: ARG_ABS_COORD (code:0)	Arg desc: The position in space to move to 


CODE GENERATED:

order_move(pos)

orderMove(pos):

	'''
	Move to a given position absolute in space

	 id is for the object the order is for

	Arg name: pos	Arg type: ARG_ABS_COORD (code:0)	Arg desc: The position in space to move to
	'''</code>

== Where can I get the code? ==

You can have a look at [http://github.com/Null000/daneel-ai github]. This is my first time using git (I've used svn before).

I will try to keep the code up to date and in a runnable state (the AI will try to do something, but nothing intelligent yet). I'm sure there will be bugs and things done the hard way or inefficiently or plain wrong but it's a work in progress and made public so some progress can be seen.

== Obstacles ==
Some of the obstacles I've encountered:

* daneel-ai code does not contain enough comments
* could not get tpsai to work
* daneel-ai tutorial is not finised
* sometimes the server gives wrong data for object owners (planet daneel-ai owned by player Null)
* sometimes the server makes the game persistent even if it's not supposed to be
** learned how to clear the data, but that is only a workaround
* usually when I colonise a planet (even when using only 2 clients and no AI) daneel-ai and tpclient-pywx freeze the next turn when getting data from the server (but it worked ok in a windows VM with the older versions of client and server even when there was AI envolved)
** same problem with battles
** this is found to be a known bug (issue 88)
** since this problem is not present in TP04 version of the library I will try to make daneel-ai work with it
*** correction this bug is still present in TP04 version. Will try to fix it.

now solved (sort of):

* could not get tpadmin-cpp to work (error when doing make)
** it works now (thanks llnz)
* function signatures do not tell you anything about the argument types (pythons fault)
** talked to verhoevenv (daneel-ai creator) about the critical parts and I guess I've been doing it the right way. His advice was "curse and start experimenting" ^_^
*** I think I have all the information I need
* I don't know the protocol specifications well enough
** I found out how to get the correct format for orders from the client

== Comments, suggestions, tips ==
Write anything (helpful) you want here.
