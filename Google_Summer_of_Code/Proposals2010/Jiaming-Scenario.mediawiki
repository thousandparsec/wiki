I am still working on it.

== Introduction==

==== Abstract====
In this wiki page, I propose a scenario and save-load support for Thousand Parsec clients.

==== Background====
It is common that a single player game with AI clients or a multiple players game can last for hours. So sometimes the player may not be able to finish a game and want to save it somehow and load and continue to play the game later.

In addition, some player may find that it is boring and monotonic to always player the single game with AI clients in the same setup. They want something more interesting and challenging. For example, they start the game in a very disadvantageous position and then try to reverse the tide and defeat others in the end.

So it would be very nice to have the scenario support. 


== Task Specification==

==== Primary goals====
By adding this scenario support, we should enable players to:

* Save a game into an external file. It would support both single-player game and multi-player game.

* Load a saved game and continue to play it. If the game is previously played with an AI client, it should enable the player to continue to play this saved game with the same AI client, i.e. the AI client has the same parameter and load the current states of the game.

* Load a pre-defined scenario. A scenario is basically just like a saved state of a game. In a scenario, the player would have some pre-defined amount of resources and fleets. The player needs to accomplish the defined goal in order to win.

* Play campaigns, which is a series of related scenarios.


Following is some other requirement as specified in the Ideas for Programmers wiki page [http://www.thousandparsec.net/wiki/Ideas_for_Programmers#Scenarios].

* This feature should be designed in such a way that other clients and client libraries can use it in the future.

* It should first make sure that the player has the necessary server, ruleset, and AI client(s) installed to play the scenario, and providing the easiest way possible to install them (download links, instructions, etc.) if they don't. 

==== Bonus goals====

* Build Scenario Designer, which allows the user to design their own scenario in a intuitive way.

==== Pre-assumptions====
In addition, their are some assumptions for above task.

* The server and AI clients provide some way to store their state.


== Implementation==
This project will be tackled as in the following work flow.

[[images/Workflow.JPG]]

* In the first step,I will implement serialization methods in the server side (tpserver-cpp). These serialization methods can be used to export the internal state of a game on the server to an persistent file (this file should be human readable), and also to import a file containing the states of a game into the server. In addition, I will also implement the serialization methods in currently existing AI clients(gencon and daneel-ai). Apart from these serialization methods, the existing protocol will be extended to support the transfer of data frames that related to save-load operations.

* In the second step, I will add support for the extended protocol to the client library (libtpproto-py) and add necessary utility methods.

* In the third step, I will modify existing or creating new UI in the client application (tpclient-pywx) and the single player wizard to 


== Detailed Project Schedule==
Coming soon.


== Comments==

Hi Jaiming, This proposal is an okay start but needs significantly more details. Questions I have for you:

* I'm afraid your assumption is incorrect, neither the server nor the AI provide a way to save in-game state.
* We need a better timeline on how things are going to work. It should be a week-by-week with goals at the end of every week. 3 months goes really fast and we need something to keep you on track.

-- Mithro