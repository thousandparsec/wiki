Warning this is a public BETA version and can change at any time (and will depending on comments).


== Short short version ==

Extend Daneel-ai to support MiniSec, MTSec and TAE rulesets. Make coding AI for new rulesets as easy as possible. Add support for coding AI in pure python.

== Short version ==

Since human players are not that easy to find every ruleset should have an AI opponent one can play against. MiniSec, MTSec and TAE rulesets are stable and don't have AI opponents (not sure if tpsai counts) so extending Daneel-ai to support all stable rulesets would make it the main client. While working on the AI for these rulesets I would try to simplify the creation of AI for new rulesets as much as possible (through extended functionality and tutorials/documentation). Currently AI logic is meant to be written in CHR syntax, I would like to add a simple way of coding AI in python only so future developers could write pure python AI if they choose (and some things are just easier that way). Any time left would be spent on speed improvements and adding common AI algorithms for easier future use.

== Long version ==

I believe that it is essential for a game to have a moderately challenging AI especially if it doesn't have a large user base.
Adding support for MiniSec, MTSec and TAE in Daneel-ai would mean it covers all stable rulesets.
With this Daneel-ai would become the main AI client and first choice for future AI coding. This would mean less code to maintain.

I have already started with work on AI for MiniSec and have noticed the documentation and tutorials are not complete. As a part of my work I would complete the documentation and write a step by step tutorial on creating AI for new rulesets.
I have also written code for automatic discovery of all possible orders (and their arguments) on a given ruleset. More functions like this one would be added for simplifying writing of AI for new rulesets.

Adding python support for AI coding in daneel-al would mean it can be used even for non rule-based AI like AIs that learn or predict opponents moves.

=== Main goals ===
All of this is expected to get done.

* add support for Minisec
** this will get done before the start of GSoc 
* add support for MTSec
* add support for TAE
* simplify AI writing as much as possible
** helper functions and detailed documentation and tutorials
* add support for coding AI in python
** including a simple way of giving orders and getting facts about the current status of the universe

=== Bonus goals ===
Some of this is expected to get done (as much as time permits)

* add a collection of common AI methods
** A*, negamax with alpha-beta pruning (improved minimax) and such
* speed up code
** parallel execution if possible (so we can put dual and quad cores to good use)
** if possible reuse some of the code from last years gsoc project
* add learning capabilities
** if I discover any that could prove useful

=== Timeline ===

==== Pre coding ====

* April 26: PARTY!
* April 27 - May 23: Community Bonding Period, playing a lot of MTSec

==== Coding period ====

* May 24 - 30:
* May 31 - June 6
* June 6 - 13
* June 14 - 20
* June 21 - 27
* June 28 - July 4
* July 5 - 11
* July 12 - 18
* July 19 - 25
* July 26 - August 1
* August 2 - 8
* August 9 - 15

== About me ==

Damjan 'Null' Ko≈°ir, 23, from Slovenia, final year, Faculty of computer and information science, specialisation in software.
Highly interested in anything AI (obviously).

More about me and my skills and experience on [[User:Null|user page]].


IRC nick on #TP: null_000

email: damjan.kosir at sign gmail.com

== Comments ==

Hi Null, This proposal is an okay start but needs significantly more details. Questions I have for you:

* Why is CHR syntax hard to understand? Please give examples of how it would be easier to do the same thing in Python. 
** A: CHR is not hard to understand but requires a different approach to programming. It is great for rule-based AI, but something that is not rule based may be done easier the imperative way (one example is an AI that tries to predict opponents moves for a few turns ahead using minimax[http://en.wikipedia.org/wiki/Minimax] or something similar) -- Null
* Are you going to tackle Minisec of MTSec first? Isn't Minisec trivial?
** A: I've already started working on Minisec to get familiar with the code and expect to finish it this week. I have an exam on 8th so I can't spare too much time now (otherwise it would have been finished by now). -- Null
* How are you going to tackle performance problems, have you run daneel-ai under a profiler to see where the speed problems are?
** I haven't run a profiler yet but I know there was a gsoc project last year that did some of the work (but the student went missing I think) so I might try to use some of the code from there (so the same work doesn't get done twice for no reason). I might try to find parts of the code that could be ran parallel to put more cores to work. But I will probably focus more on adding functionality not speed. -- Null
* We need a better timeline on how things are going to work. It should be a week-by-week with goals at the end of every week. 3 months goes really fast and we need something to keep you on track.

-- Mithro