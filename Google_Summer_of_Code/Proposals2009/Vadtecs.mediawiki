== ABSTRACT ==

It is my intention to implement unit testing for the Thousand Parsec C++ client protocol module. The unit testing will validate the C++ client protocol module against the established Thousand Parsec protocol(s). Unit testing will be achieved by using available testing tools such as CppUnit and custom code to test for adherence to the established Thousand Parsec protocol(s). The unit testing will provide benchmarking of the C++ client protocol module as much as possible.

== CONTACT INFO & AVAILABILITY ==

'''Contact Info'''

Nicholas Davey<br>
IRC Nick: Vadtec<br>
E-mail: vadtec@vadtec.net<br>
AIM: vadtec MSN: vadtec@vadtec.net

Note: You can reach me nearly any time on irc.vadtec.net (6667), AIM, or MSN.

'''Availability'''

I am usually available from 1600 CDT (GMT -6) to around 2300 (sometimes as late as 0100).

I plan to spend at minimum 4 hours per day and 4-6 hours per weekend working on implementing unit testing. As time (and class work) permits, I will put in extra time on the project.

== PROJECT PROPOSAL ==

To implement unit testing for the Thousand Parsec C++ client protocol module to ensure proper compliance with all requirements of the established Thousand Parsec protocol(s).

'''Testing for correctness'''
:*The unit testing will test at minimum all core protocol frames to ensure that all possible outcomes are within established Thousand Parsec protocol requirements and specifications.

'''Benchmarking'''

:*Where possible, the unit testing will provide benchmarking of the tested protocol frames to help identify potential bottlenecks in the code

:*Benchmarking will be achieved initially using timing of calls to code. If possible within the allowed project time frame, a method similar to cachegrind from the Valgrind suit will be employed to provide more accurate method of benchmarking of code pathways.

== IMPORTANCE OF UNIT TESTING ==

Unit testing of the Thousand Parsec C++ client protocol module is paramount to releasing an outstanding product for people to play and enjoy. Unit testing will free both the client and server developers from having to handle issues that are unrelated to their respective areas of coding. Over all, unit testing will improve both the game clients and servers.

=== Benefits to the community ===

#Ensure that all clients implementing the established Thousand Parsec protocol(s) will function as expected
#Enforce conformance to the established Thousand Parsec protocol(s) in all clients
#Improve the quality of released clients

By unit testing the C++ client protocol module for conformance to the established Thousand Parsec protocol(s), the game developers can focus more on implementing features of the game. They will be able to rely on the fact that the C++ client protocol module works as expected. This will increase the rate at which the game developers can release new features for the game. It will also help decrease the potential for serious bugs to be found and potentially exploited.

=== Benefits to Thousand Parsec ===

#Ensure that all clients using the C++ client protocol module adhere to the established Thousand Parsec protocol
#Better implementation of the established Thousand Parsec C++ client protocol module by clients

By unit testing the C++ client protocol module, the server developers can rely on the fact that the client is going to behave in a predefined manner. This will eliminate the need for the server developers to debug client related errors that are causing them issues.

== EXPECTED PROJECT MILESTONES ==

'''Core protocol frames to be unit tested'''
:*Buffer
:*Frame
:*FailFrame
:*Cache
:*CacheMethod

 

In addition, all non-core protocol frames will be unit tested to make sure they serialize/de-serialize properly. This will inherently unit test the C++ client protocol module.

=== Project Timeline ===

#General
#*Maintain documentation of unit testing
#**Use the wiki to document each unit test as it is completed, or in a situation where unit testing isn't feasible or possible documenting as to why
#*git repository tracking
#**Use git to track all code changes
#**Ensure that any given revision will compile and run as expected
#*Provide feedback to the core development team and mentors regarding any possible improvements or changes that could be made to the C++ client protocol module
#'''April 20 - May 22'''
#*Research unit testing methodologies and techniques
#*Create simple examples of unit testing
#*Become familiar with the established Thousand Parsec protocol(s) and gain a fundamental understanding of its workings
#'''May 23 - July 5'''
#*Begin extending the existing unit testing for the current C++ client protocol module.
#**Benchmark any possible protocol frames
#*Document each unit test as it is completed
#'''July 6'''
#*At minimum, the following protocol frames will have been unit tested:
#**Buffer
#**Frame
#**FailFrame
#'''July 6 - August 9'''
#*Continue implementing protocol frame unit testing and any possible benchmarking of the tested protocol frames
#*Continue documenting each unit test as it is completed
#'''August 10'''
#*The unit testing will have implemented testing of the core protocol frames
#*The unit testing will have implemented testing of at least 75% of all protocol frames
#'''August 10 - August 16'''
#*All implemented unit testing will be finalized and documented
#*Any unit testing which is incomplete will be excluded from normal unit testing to prevent false reporting or errors
#*Code clean up
#'''August 17'''
#*Final check in of all unit testing code and documentation 

In the event the entire Thousand Parsec C++ client protocol module has been unit tested and conforms to the requirements of the protocol, I will begin looking into implementing a cachegrind style of benchmarking of tested protocol frames. 

=== Disaster Plan === 

Life sometimes throws a rock in the road ahead of us; while I try to avoid them, not everything can be avoided. In the event a situation arises that I must deal with, I will do the best I can to handle it and continue working on the project. In the event I am forced to leave the project unfinished, I am confident another coder will be able to finish it in my place due to a constant log being kept of what has and has not been finished, as well as a log of what my intentions are for the project.

== PERSONAL EXPERIENCE ==

I am currently enrolled in an undergraduate school studying for my A.A.S. C.I.S. I am focused on the programming aspects of the source with interest in main frame development. I plan to transfer to another local college after obtaining my A.A.S. and continue my degree plan by refocusing into a B.S. C.S., eventually obtaining my M.A. C.S. with as much emphasis as possible in main frame development.

I am a user of primarily GNU/Linux since 2000 during which time I have come to love the Red Hat flavors of GNU/Linux. I have been an open source advocate almost the entire time, even going so far as to give up niceties of Windows in favor of open source software when it was appropriate. Any time I am presented with a problem, I look to open source first and (begrudgingly) turn to proprietary solutions only when I must.

Outside of school I have limited professional experience. I am a self taught C coder and have been using C as my language of choice since around 2003. I have dabbled with many languages, some of which include Tcl, Python, Perl and BASIC. I use PHP as my language of choice for web development, though I used Perl before PHP. I enjoy learning new languages, and even though I may dislike some languages, I will try to find the good points for any language I try.

== PERSONAL HISTORY ==

I am a single father of two wonderful children. My son is now eight and my daughter is now six. They are what drive me in life. Everything I do is to support them and give them the life they deserve. To say they are my life is an understatement.

While I am a father first, I do enjoy many things. Computers would be my second love in life (after my kids of course). I like to bend computers to my will as much as possible. When I am not slave driving a computer, I am watching anime or playing a variety of video and computer games. I am an avid RPGer, both on game consoles and in the older style of play from D&D. I play D&D any chance I get and am not afraid to play a whacky character. (My friends will say my characters represent my true self, but I disagree.)

I love to learn about computers in general, so the more I know the happier it makes me. I can be quite stubborn and have a tendency to not give up on problems that I know can be solved. I am willing to try most things at least once and open to different points of view.

When I'm not having fun with my kids or playing computer gaming or bending computers to my will, I enjoy going out with my friends and making trips to see my best friend. I try not to sweat the small stuff and take life one day at a time. If life should rear its ugly head and get in my way, I try my best to push it aside and live my life as I see fit.

== CLOSING ==

I am eager to work on this project and help improve Thousand Parsec as much as possible. The 4x genre of gaming is one of my favorites. Anything I can do to bring a new spin on the genre is a good thing to me. I know along the way I will learn a great deal and be contributing back to an open source project that I want to see become better. I also know that along the way I will get to know a great group of people who are passionate about the work they do in open source.

I appreciate your considering my application for working with Thousand Parsec during Google Summer of Code 2009 and hope to be working with you soon on this project.

Sincerely,

--[[User:Vadtec|Vadtec]] 01:51, 26 March 2009 (EDT)

== Comments ==
Looks good Vadtec. I can't think of anything specific at the moment that needs improving. --[[User:Lee Begg|Lee Begg]] 05:18, 31 March 2009 (EDT)