'''Name: David Kohlbrenner'''

'''Project: Titans of the Void ruleset'''

Titans of the Void is a ruleset proposal for Thousand Parsec emphasizing supply lines and battles between large, multi-part ships.

The goal of this ruleset is to present the players with a small set of very powerful combat ships and many strategic options. In many ways, this is similar to modern tactics games(Fire Emblem, FF Tactics, etc), but with an economic 4x flair to it. 
=The Game=
==Ships==
There are two classes of ships in TotV: Battlecruisers and support craft.
*Battlecruisers are the behemoths that serve as the main combat craft of space faring peoples.
*Support craft are non-combat craft that fit into a set of specific roles: Resupply, Scouting, Raiding.

===Battlecruisers===
Outright destruction of a Battlecruiser very unlikely. Thus, to make battles between them interesting, they have a number of subsystems, or components.
A player begins the game with a handful of these ships, and will probably only construct a few more throughout the game.
These are really the core of combat in TotV.

Battlecruiser components:
#Engines: Cannot be completely destroyed, can be crippled. (Medium to hit, Medium Armor, Medium HP)
#Bridge: Rare to hit, causes vessel to head to nearest friendly planet at 1/2 speed if destroyed. (Impossible to hit, Heavy Armor, No HP)
#Targeting systems: destruction massively reduces accuracy/coordination of weapon arrays (Hard to hit, light armor, medium HP)
#Weapon Arrays: Redundant(4-10), multiple types(?). Destruction disables firing. (Medium to hit, medium armor, Light/Medium HP)
#Assault Bays: Destruction disables planetary takeover. (Easy to hit,  medium armor, medium HP)
#Hull: Generic Damage zone. Massive HP/Armor, destruction reveals Core. (V. Easy to hit, Heavy armor, Very Heavy HP)
##Core: Normally non-target-able. Lightly armored, almost no HP, hardish to hit. Destruction eliminates the Battlecruiser. (This is the only way to kill them) (Fuel/ammo stores are here? flavor...)

===Support Craft===
*Supply:
**Munitions Carrier: Supplies fuel and ammunition.
**Systems Repair: Can repair: Hull, Engines, Targeting.
**Crew Transport: Can repair: Bridge, Weapon Arrays, Assault bays.
*Scouting:
**Drone Scout: Fast movement, very light armor. This is what you go looking for stuff with.
*Raiding:
**Flak ship: Two abilities, for each flak ship present in an area, destroys one scout before it can report back. Also, if in the same area as enemy support craft, has a chance to randomly destroy one.

===Balance concept/thinking===
Battlecruisers completely overpower support craft. 1v1 they are basically even, however, there is a specific set of ideas behind their components. The expected value of going after any specific component is about equal.

Things that are hard to hit (Bridge, targeting) cause massive failure to the enemy, while things that are somewhat easy to hit (engines, weapons) cause problems, but cannot be fully taken out, while the easiest to hit (Hull) take an enormous amount of damage before being effected. Assault bays are a special case as I am not sure yet if they should be an easy target (stop planetary takeover fast) or hard (have to try for it). Note that an enemy player has options, they can go after subsystems (crippling their opponent) or go after the hull (no effect for a long time) to try and destroy their opponent.

Support craft are pretty simple in their balance:
*Munitions and repair are needed all the time, but don't do anything in combat but support battlecruisers.
*Scouts are fast and necessary, but are easily fooled/countered by flak (as well as having no other abilities)
*Flak can stop the opponent from spying on you, and can raid enemy supply lines, but serve no direct support to your battlecruisers.

==Combat==
===Combat Concept===
Combat is intended to be simple to construct, yet deep in strategic options.

There is only ONE combat ship type, the battlecruiser. A battlecruiser is given standing orders for its target (A specific component type, or a specific supply craft type). 
*One battlecruiser turn is thus: it issues orders to weapon arrays based on standing orders and the state of targeting systems. If targeting systems are at 100% repair, each weapon array told the standing order target. Otherwise, they have a %repair chance to target the correct system, or otherwise a random system/ship.
**When an array receives a target, it 'rolls' against the chance to hit the component/ship. If it hits, it applies its damage based on the state of the weapon array (%repair=%damage dealt). Armor, and possibly damage types, will come into play here also.
*Support craft combat is exceedingly simple. If a flak ship is in the same area as an enemy support craft, they have a chance to destroy it. (One to one ratio of flaks: possible kills).

===Health===
Two Health/Armor/Size concepts:
#Health/Size: A component/ship has HP and how hard it is to hit.
#Health/Armor/Size: A component/ship has HP, an armor type that can counter damage, and how hard it is to hit.

===Movement===
Two Movement Speed concepts:
#Scouts/Everyone else: Scouts move faster than everything, everyone else moves at the same speed.
#Scouts/Support/Battlecruiser: Scouts still move the fastest, but support craft outpace battlecruisers.

==Economy==
The economy of TotV is simple, but provides a good backend for the combat system.
===Resources===
*There is one resource type (called rez from here on)
*Each planet gives a fixed rate of rez per turn. It takes a small amount of rez to build a supply craft of any type. Production occurs every few turns (for support craft).
Battlecruisers taken many many turns and the combined income from many planets to produce.
===Planets===
A planet has two modes it can be in. Production and Barricade.
*In production mode, the planet produces rez, can build ships, and can be captured.
*In barricade mode, the planet drains rez, cannot build ships, and cannot be captured.

==Beginning a Game==
*A new game would start with 2 or more players (I'm not sure what the cap should be, if any.)
*Each player would have a home territory (home planet and 2-5 owned planets nearby)
*As well as a starting fleet (1-2 battlecruisers and a handful of scouts)
*Players will begin expanding and scouting from turn 1, and should be trying to capture contested territory quickly.

The full map should be enough that each player can roughly double their starting territory without taking enemy planets.

==Other==
*As with any new system, balance is going to be very tough. To account for this, the first set of options are going to be simple: One battlecruiser type, one damage type, one ammunition type, one fuel type. I hope to leave space for (and later develop) more options for these and add customizability to battlecruisers. (Note: I know people interested in playtesting this who will be available over the summer)
*Flavor text. As strange as it sounds, the most important non-mechanic part of TotV to me is the flavor. I have found that interesting and immersive feedback (even textual) from a game makes it far, far more fun. Example: (A battlecruiser has just taken major damage to its engines during the last turn)
**What I don't want: "Battlecruiser at Alpha Centauri has taken %75 damage to engine"
**What I do want:"The Indomnible's captain reports: a barrage from the Freedom's missile batteries has struck home and they are now venting engine plasma (Engines at %25)" (This would be better if I was a writer.... might get some help on these)
*Relatedly, Battlecruisers are player named.
*Components on a battlecruiser will have equal value as targets. (%to-hit vs effect)

==Wishlist==
These are features that are NOT required for the game to work or be balanced, but will add to the complexity and fun of the game. (In order of importance)
*Different battlecruiser classes.
*Different weapon types.
*Varied planetary types.
*Upgrades/Research.
*Custom battlecruiser classes.
*Varied player abilities (races)

=Design=
*I start my summer on May 15th, and it runs until August 25th. 
*I am currently applying to GSoC projects and research projects at my college. So my plans are not fully solidified.
*I would be working this as my summer job (thus, 8 hour days, 5 days a week) I would also hope to continue development after GSoC
*My hours (if needed for communication) are 100% flexible.

==Milestones/Time Estimates==
#May 15th: Base ruleset will be finalized (My finals end on the 14th)
#May 14th-18th: Write a small testing environment for ships. (Single location that displays ships at the location) Includes writing a simple planet class.
#May 18th-22nd: Write stubs and superclasses for all ships.
#May 25th-29th: Write _Basic components. Add in component lists to _Basic ship classes.
##At this point, all ships can be represented in their basic forms.
#June 1st-5th: Write display system for ships. This will show the client the status of components on a battlecruiser and the status of a support craft.
#June 8th-12th: Write recognition for the server to detect that a battle should take place, and write combat code that follows the rules outlined for combat between battlecruisers.
#June 15th-19th: Write move and repair order code that updates on a turn basis.
#June 22nd-26th: Write target/takeover orders that can be issued to battlecruisers. Write server turn order processing. Includes rez collection from planets.
##At This point, a turn can be taken, combat can occur, and orders can be given.
#June 29th-July 3rd: Heavy testing of the components of the combat code. Rewrite testing environment to include multiple locations to better test combat code and movement code. Write server detection of flak ships for destruction of enemy support craft.
#July 6nd-10th: Write server detection of scouts for vision purposes, and include checks for present flak ships.
#July 13th-17th: Write planetary mode switching orders. Implement modes for planets. Write planetary construction order. Implement construction queue on the planet.
## All economic, combat, and order code is now in-place and working.
#July 20th-24th: Write combat descriptor generator code. Insert into combat feedback. Write lots of descriptors. Other flavor text insertion.
#July 27th -> July 31st->:Balancing, catchup, and bugfix (and more combat descriptors). If time permits, addition of wishlist features.

I have scheduled all milestones on Fridays, this is so that I have a two day buffer zone to fix any problems/catch up as needed.

This is a pretty conservative timeline for working 8hr days. I'm confident that the basic implementation listed here could be completed in less time.

If I do somehow fall behind, all features not listed under wishlist are necessary for balance to be achievable, thus I will reschedule my milestones to extend into the last time period, and cut some wishlist features.

==Implementation==
There are three aspects of TotV to create, the ships, the combat, and the economy.
During development, each will be split into parts, which will be done across categories in stages.

===Technical===
Four types of player interactable objects in TotV:
#Support ships (Move,Supply/Repair)
#Planets (Produce,Barricade)
#Battlecruisers (Move,Target,Takeover)
#Components (No orders)

Six types of orders:
#Move- Issued to a ship. Targets a planet. The selected ship will move at it's top speed to the targeted planet.
#Barricade/Production- Issued to a planet. Toggles the planet between Production mode and Barricade mode. (See balance section).
#Produce- Issued to a planet. Tells the planet to begin producing the selected ship type (assuming the player has enough resources).
#Target- Issued to a battlecruiser. Sets the priority target type for the battlecruiser. (See combat section)
#Takeover- Issued to a battlecruiser. Targets the planet at the same location. If the planet is vulnerable, sets the planet's owner to the battlecruiser's owner.
#Supply/Repair- Issued to a support craft. Targets a battlecruiser in the same location. Adds to the battlecruiser's ammo/fuel, or repairs a component. (This order may be given targeting an un-damaged battlecruiser, in which case the support ship follows until repairing will have an effect.)

I would prefer to develop in C++.

===Design Diagram===
*Planet Class- Contains flag for mode, and getRez()
**Basic Planet: getRez() returns 1 or -1.
*Ship Class:
**Battlecruiser Class- Contains an unbounded list of components.
***Starting Battlecruiser-Seven BC Components
**Support Class- Contains one component. (These are a basic wrapper for their component, not much more)
***Munitions-One component: SP_Munitions_Basic
***Systems-One component: SP_Systems_Basic
***Crew-One component: SP_Crew_Basic
***Scout-One component: SP_Scout_Basic
***Flak-One component: SP_Flak_Basic
*Component Class- Contains a virtual damage(dmg) method, a virtual getHP() method , an armor rating, and an HP counter
**BC_Hull: 
***BC_Hull_Basic- damage(dmg) updates internal HP. getHP() returns HP ratio.
**BC_Targeting: 
***BC_Targeting_Basic- damage(dmg) updates internal HP. getHP() returns HP ratio
**BC_Weapon-Virtual getDmgAmt() getDmgType()
***BC_Weapon_Basic- damage(dmg) updates internal HP. getHP() returns HP ratio. getDmgAmt() returns 10. getDmgType() returns "none".
**BC_Bridge-
***BC_Bridge_Basic- damage(dmg) updates internal HP.  getHP() returns HP ratio.
**BC_Engines- virtual getSpeed()
***BC_Engines_Basic- damage(dmg) updates internal HP. getHP() returns HP ratio. getSpeed() return top speed currently available.
**BC_Assault
***BC_Assault_Basic- damage(dmg) updates internal HP. getHP() returns HP ratio.
**BC_Core
***BC_Core_Basic- damage(dmg) updates internal HP. getHP() returns HP ratio.
**SP_Munitions
***SP_Munitions_Basic- damage(dmg) updates internal HP. getHP() returns HP ratio.
**SP_Systems
***SP_Systems_Basic-damage(dmg) updates internal HP. getHP() returns HP ratio.
**SP_Crewe
***SP_Crew_Basic-damage(dmg) updates internal HP. getHP() returns HP ratio.
**SP_Scout
***SP_Scout_Basic-damage(dmg) updates internal HP. getHP() returns HP ratio.
**SP_Flak
***SP_Flak_Basic-damage(dmg) updates internal HP. getHP() returns HP ratio.

The design emphasizes modularity of components. The goal is that later on, new battlecruiser types or variant support ships can be implemented with radically different components. Ex. a hull that shares damage across all components, an easy to hit engine that gives a large speed bonus, or a bridge that is indestructible.

The _Basic indicates this is the base implementation that is required to be completed for the game to work. Other implementations can (and should) be added for interesting play.

==Turn Process==
#Check win conditions.
##I will have to figure these out during balance testing. Total annihilation will NOT be required.
#Collect Resources.
##This just iterates through all planets owned by the player, calls getRez() and adds the total (positive or negative) to their balance
#Produce ships. (On a planet by planet basis)
#Serve arrival, production and battle updates to the player
#Allow player to issue orders to ships and planets.
#Move all ships with move orders.
#Process Battles currently active. (Having this after orders allows the player to react to enemy attacks. However, it is AFTER move, thus there is a first strike advantage for the attacker.)
#End turn.

=Other Notes=
==Game Speed==
Ideally, the game would be designed for larger, long-term games, but able to support a quicker game style for getting used to the design.

I envision the game being played in a somewhat similar style to Diplomacy. By this I mean that the game will have a small enough set of units and planets on the 'board' that one could sit down for 10 minutes every day or so and take their turn. This wouldn't mean that it has to be played this way, simply that the complexity would be in the movements and the planning, not in managing 100s of individual units.

That said, when updating the design, I realized that this could very easily be adapted for single-player 'mission' based games. Simply remove the ability to produce from planets, have a decent sized starting force and it becomes a tactics game. These would clearly be faster paced, as there is no need to wait for the other player or manage production. I am not intending to work on that aspect as part of GSoC.

==Why is this fun?==
This is going to be the primary driving force behind balance testing. The game needs to be such that the player can see results of their actions, and know that they are making progress. At the same time, my design demands that the ships the player cares about aren't being destroyed often. To address this, planets are exceedingly easy to capture, and watching your ownership of the map expand significantly after a successful battle should be satisfying.

What should make TotV fun is what makes tactics games, chess, and other low-unit count strategy games fun; the ability to quickly and easily understand the state of the entire universe while still making clever play rewarding.

==Game Script==
A short experimental game script can be found [http://www.contrib.andrew.cmu.edu/~dkohlbre/TPDemo.pdf here]. (pdf)
Writing this has changed my opinion on several mechanics. Biggest among them is the elimination of any sort of 'bank' for resources. This too heavily encourages defensive and over-extending play. The other element that needs to be modified is barricading, which will likely be changed to take more than one turn to do.

Two edited screenshots (minisec) explaining basic elements of the client interface can be found [http://www.contrib.andrew.cmu.edu/~dkohlbre/demo1.jpeg here] and [http://www.contrib.andrew.cmu.edu/~dkohlbre/demo2.jpeg here]

=Student=
==Contact==
*I am consistently available via chat services, email, and VoIP services. (Ask me for any of my contact info specifics)
*If for some reason, I am out of contact, my phone number will be available.
*I do not anticipate any issues with losing access to internet and in the event of computer failure, I have many backup machines I could move to.
==Info==
Hi, my name is David Kohlbrenner and I am a sophomore at Carnegie Mellon University majoring in Computer Science.
*I have experience with large projects, and am used to dealing with pre-existing codebases.
*I have not worked on an Open Source project before, but am eager to start
*I have worked as a professional Java developer for a Washington DC based startup.
*I spent my previous summer developing software to sell on google's Android Market. (see: stelluxstudios.com) 
*I have a large amount of experience in C, x86 assembly, and Java. I have some experience in C++, and have worked with a scattering of other languages.
*I have experience designing and implementing systems ranging from a small unix-like kernel (C) to card games and sudoku on mobile devices (Java).
*I have been an avid gamer all of my life, and concentrate mostly on FPSs and RPGs.
*My fondest 4X memories come from Master of Orion 1 and Spaceward Ho!. Recently I have been playing Stardock's amazing Galactic Civilizations series.
*I'd be happy to do a daily/biweekly blog entry/forum post as to the current progress, if people are interested in whats going on, I'd happy to talk about it
*I applied to TP for GSoC last year with TotV and have since updated it for this year.