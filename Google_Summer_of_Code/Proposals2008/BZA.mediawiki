==REDACTED==
Please disregard my application since I have decided to not participate in GSoC this year. Thank you.

Ben Johnson

'''<p>Name: Ben Johnson</p>'''

'''<p>Project: Risky Galaxy: A Thousand Parsec Ruleset for the TP C++ server - ([[Risk Alternate]])</p>'''

== Project Synopsis == 
<p>This project is to create a Thousand Parsec ruleset that clones/mimics the core rules of the [http://en.wikipedia.org/wiki/Risk_(game) Risk Board Game].  While some aspect of the turn based play will have to be modified to fit a turn system in which you are forced to queue up your turn actions and have them executed in a bundle instead of a system that allows you to play reactively and incrementally, the goal of this project is that an individual who has played risk before can pick up the game with  ease.  In other word, the final product should have very small (~5 minutes) learning curve to an experienced Risk player. Play flow too should seem familiar and simple to the experienced Risk player.</p>

== Benefit to the Thousand Parsec Community ==
<p>  The benefit TP receives form this project is that:</p>
* TP can appeal to more than just 4X players, it could also appeal to board game lovers as well and, with a good combination of 4X setting and simple core ruleset, neither group would be completely denied the fun of the game.
* Ruleset designed by an individual with 4+ years C++ programming experience, 2+ years focused student-level game development experience,  and 3+ years game design experience with a passion for game design and innovation.

== Project Deliverables ==
* First, since the turn-based to tick-based gameplay conversion is of paramount importance in terms of ruleset development, game flow, and fun, the first deliverable will be a shallow example ruleset that demonstrates the tick based game flow. By the end of the first deliverable the user/player will be able to:
**input an action to take (place units, attack, fortify) from a text menu, console style.
**for each action, input the specifics like:
***placing <int>n units on territory <string>x 
***attacking from territory <string>x to territory <string>y with <int>n units
***fortify form territory <string>x to territory <string>y with <int>n units
**queue multiple actions 
**at the tick, see the queued actions resolve correctly, via text output, or see any conflicts and the resolutions or error messages
**any actions taken will be strictly superficial.  that is, it will not be remembered that there are 3 units on territory x or that the attack on territory y caused the player to lose 2 troops. Any data entered during a player's turn goes out of scope after the tick essentially.
* Second, the board establishment and unit placement functionality are core since no play can proceed before this occurs, so this will be the focus of the second deliverable.  Ideally this would be integrated with the turn system at deliverable time, but that integration may have unforeseen problems, so the two will only be integrated at deliverable time if it can be done without being total hack.  The functionality in this is:
**player can now see the game map, divided into named territories (planets), and named continents.  If some kind of coloring or outlining of planets is possible then continents will be demarcated this way with a key table/graphics showing a color, then a continent name, then the troop bonus associated with controlling it.  Otherwise, planets in the same continent will all have the same  ASCII symbol in front of their name, like "@ - Omicron Presei" and the key in this case would have the associated character instead of the color in the precious example.
**player can now go through the process of setting up the board for a game as detailed in [[Risk Alternate]].
**troop creation, troop count, turn troop bonuses, and continent troop bonuses are all kept track of now with the accompanying rules for placing troops
**troops on a territory will be demarcated via a ship over the corresponding planet.  the number of troops on a territory will be displayed as a number either by the ship or by the territory name.
**once the board is set up, the player can test out fortifying and gathering and placing troops.  Currently, if units can be moved across the board graphically then this would be the best way to show the player's actions being acted out, but otherwise the player will just only see the current state of the game board after every tick, sans any fancy graphics or animation.
**the player will not yet be able to play through a game because there is no mechanic for combat yet and without combat no one can gain or lose ground.
**this should act as a shell for the game with the player able to do everything from the core Risk ruleset except for combat.
**all pertinent game data that does not have to do with combat, like player, troop and map data, being kept track of between turns and there may even be a win/lose state.
* Third, is the combat system.  Once the above two have been accomplished, the next big focus is on getting the dice-roll logic, attack sequence, and combat rules/framework working well, so this combat system as explained in the [http://www.thousandparsec.net/wiki/Risk_Alternate#Stage_Attacks Staging Attacks] and [http://www.thousandparsec.net/wiki/Risk_Alternate#Combat Combat] sections of the ruleset description page.  The functions entailed in this deliverable are:
**player can now issue commands to attack from one map territory to another with some number of untis and the conflict can now be resolved.  the player can queue as many attacks as he/she has territories controlled, but each attack must be against a territory that has not yet been attacked this turn.
**if combat can be done via client area action, then that would be great, but if not the player could allways still work from some text menu or some console command.  This may not be enforced at the attack selection stage, but will most definitely be during attack resolution.
**initially, the defender in an attack will always defend with as many dice as possible.
**dice rolls are basically rand()%6 + 1 and this is done for as many troops selected for attack and defense, with the caveat that the attacker only gets max 3 attack die rolls and the defender only gets max 2.
**once every attack has been resolved, the game board and player data is updated and the turn goes to the next player.
**there will definitely be a win/lose state at this point and something will happen when you win, though I don't know what yet.
*Finally, with what time remains, I would focus on polishing and refining the ruleset and, if time permits, implementing one or more of the items described [http://www.thousandparsec.net/wiki/Risk_Alternate#Ideas_for_Future_Development here]. Polishing will entail:
**documenting any poorly documented code
**play testing for edge cases which cause resolution conflicts
**game flow tweaking such that the game is easy to pick up and fun to play.
**etc.

== Project Details ==
<p> For everything you need to know about my current vision for the ruleset and its implementation, please see  the TP wiki page [[Risk Alternate]].</p>

== Project Schedule ==
<p>My core principle in this schedule is giving myself one month for each deliverable starting as soon as my final exams end, April 25th.  If things progress quicker than this then that is great, but there is currently time built into the schedule such that even if a task goes longer that the personal deadline for every task, I should have the tree major deliverables complete by early April, which is my overall personal completion deadline. It should also be noted that I will be taking one summer class and working on my own game for some of my time, so I cannot make the assumption that my time will be spent "full time" on the project, but I initially estimate that as of 2008-04-26 4-6 hours a day will be spent working on the project, not including weekends.</p>
* 2008-04-14 - 2008-05-26: Community/Mentor bonding, ruleset protocol and c++ server research, and first deliverable prototyping as soon as possible because I don't want to waste time and the sooner the core tech is done, the sooner cool features and polish can be added.  That said though, the focus is to write good code, not quickly hack utter crap. It should be noted though that finals end 2008-04-25, so that is the point when I will begin working on the project.
* 2008-04-26 - 2008-05-26: work begins on the first deliverable.  Hopefully I will be able to start coding right on the 26th, but there is not guarantee and I may not have gotten to do all the research necessary before the 26th, so this could push my code start date as far as June 3rd-10th.  Currently May 26th is my personal deadline for first deliverable but should be no later than the beginning of June.
* 2008-05-27 - 2008-06-27: with a solid turn system prototype in hand, work begins on board definition, unit placement and movement and the definition of territories, continents, etc.  There will probably be some research time and if the turn system takes longer than expected, the start date for this deliverable could get pushed to early June but my personal completion date for this deliverable is June 28th with a late completion date of July 3rd-10th.
* 2008-06-28 - 2008-07-28: finally, with most of the key elements of Risk intact, work begins on the combat system.  as with the previous task, some prep work will probably be involved but, regardless if this is necessary or the previous task runs late, this task should start no later than July 3rd-10th.  That established, work on this should end around the end of July but no later than early to mid-August.  At this point, every aspect of the game should be integrated into the core ruleset and '''hopefully''' be playable and community testable.
* 2008-07-28 - 2008-08-17: whatever time is left over will be spent polishing gameplay and, if possible, introducing secondary elements that will not clutter the core gameplay.  The emphasis though is on polish, since the easier and more comfortable is thgame is to users and to the community, the better.  This is much more important than secondary features.
* 2008-08-17 - 2008-09-1: whatever wrap-up is required of me by mentors/Google/et al. can be done in this time frame.

== Personal Background ==
<p>My Name is Ben Johnson.  I am 26 and originally from San Diego, CA but now living in Seattle, WA.  I spent 5 years at Point Loma Nazarene University getting my B.A. in Psychology with a Minor in Computer Science.  I basically accomplished the first two yeras of the B.Sc. Computer Science program in my last two years at the school.</p>
<p> I am currently attending DigiPen Institute of Technology and am enrolled in the B.Sc.  Real Time Interactive Simulation program that is entirely focused on game development.  I have literally spent almost the last 3 years making games from the ground up in C/C++ with a different team each year '''along with''' working towards what is basically 5 year B.Sc. Computer Science program.  Im am currently finishing my 3rd year and am on track to graduate this coming year.  My partner in crime and game making every year is TP's own Tyler "Single Space" Shaub, aka xdotx.</p>
<p> Personally, I am very much devoted to game design and have spent my three years at DigiPen learning game design and honing my skills in it, as well as my programming skills.  I would say that I am a good game designer and am a proficient coder.  I believe what gives me an edge is that I actually have experience implementing game systems in C++ along with all the traditional knowledge required of a B.Sc. CompSci student.  Although, I will say that, although I am trained as a programmer, I think more naturally in terms of game design and when problem solving, I tend to resolve things better when I can put it in terms of game design.</p>
<p>If you are at all interested in my resume and portfolio of previous code and design work, it all can be found on my resume web page [http://www.digipen.edu/~bjohnso2 here].</p>

== Community Feedback ==
I would greatly appreciate any advice, criticism, or comments on my proposal and design.  Feel free to leave them here or email me at bjohnso2@digipen.edu
