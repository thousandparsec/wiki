=Space Empires III ruleset for Thousand Parsec=

As a project for this year’s GSoC, I’d like to implement a ruleset for the game Space Empires III in the Thousand Parsec framework. I like this game quite a lot, which will make it motivating to work on this project. I don’t aim at a perfect clone though; I’ll probably tweak some concepts here and there to make it just perfect in my eyes, the ultimate goal being for me to play the newly implemented game instead of the existing SEIII. I think it makes a pretty nice GSoC project, as it has a useful purpose (to have a popular game under the Thousand Parsec framework), is an interesting project for a student, and is a good opener on the open source development community.

Implementing a ruleset within the existing framework is, in itself, not too difficult. The biggest part of the design is already done, so I’d just have to use it for this particular game. I’ve looked into the framework’s code, and it looks straightforward enough not to spend too much time figuring it out. The already existing examples (like RFTS) should also be very helping. 
What has to be done though, is deciding what exactly to implement. In fact, SEIII is not the basic 4X game, as it has a more or less high level of detail. This gives a relatively complex universe, which cannot be entirely implemented over the course of three months. So, choices have to be made, to narrow down all of the rules to a reasonable base, which would still provide an interesting game to play. 


==Insights into the game==

Here is a short description of Space Empires III, based on the shareware version of the game (which is quite enough for a three months project); in this game, a player starts with a single planet, and aims at colonizing other planets and systems, as well as warring with other players. To travel between systems, ships need to go through worm holes, which “teleports” them into the next system. To colonize planets in these systems, he needs colonizer ships, conceived to colonize a particular type of planet. In fact, planets have various types of atmosphere, and each requires a different technology to colonize. Once he colonized a planet, he may build facilities on the ground. Construction, research and intelligence centers produce respectively construction, research and intelligence points. Space ports transfer all the points produced to the player in order for him to use them (one space port is needed on every system where points are being produced). Resupply depots allow friendly ships to resupply in their long travel. There are also planetary shields and missiles, to defend the planet from invaders.

To war with his enemies, the player needs battle ships, which he can, like other ships in the game, design freely, using the components he has access to. The combat system is not the usual damage points system; actually, damage is dealt to the ship’s components. So a ship, which has taken 4 points of damage, might become either totally useless or only slightly damaged, depending on the destroyed components. A battle between ships (or between ships and a planet) begins if the attacker tries to move on the same square as the defender, and wants to attack him. A battle is divided into combat turns, where both the attacker and defender fire and move. A battle ends when one of the two sides has been annihilated, or if a certain number of combat turns have passed. In that case, the battle is drawn, and both parties remain on the same square.

Research can be used for various purposes, like develop better ship components, faster ship construction, ability to colonize a particular type of atmosphere… Quite a lot of technology levels are available. 

Basic diplomacy and alliances, which enables trade between players, are also available.

==Objects==

Formally, here are the objects of this game and their properties.

===Objects which cannot be owned by a player===
* Systems:  Can contain one star, planets and space storms (which make passing by ships invisible), and at least one worm hole. All systems have the same size.
* Worm holes: Link two systems together.
* Battles: It would be useful to have those as objects, so they can be resolved easily. This object will also determine how even the battle is, to distribute honor points accordingly (see “honor system” below). Finally, it will be helping to be sure that no ship can cross a square where a battle is engaged.

===Owned objects===
* Planets: Have 6 possible atmosphere types, a size (influencing the maximum number of facilities), a population, a population happiness (influencing population growth), the demanded production rate (influencing population happiness), a value (influencing productivity), and planetary conditions (influencing population growth). Planets with more than 100M inhabitants get an inbuilt ship yard, so ships can be constructed. A colony on a planet can be destroyed by attacking ships, if the population gets to 0. All the facilities are then destroyed. 
* Ships: Have a design, speed and time left before out of supplies. A ship can be anywhere, except on a square where a battle occurs.
* Designs: Are made of a ship type and a set of components, located into one of the three hulls (inner, middle and outer). These hulls determine which components will be destroyed first. Ship types determine how many components can fit in and the actions that can be performed by the ship. There also are requirements for using a particular ship type, like the need of some specific components (crew quarters, life support…). Designs also have a cost, which is the sum of its components’ costs and the cost of the ship type. They can be labeled as prototype if no ships were ever built using that design.
* Components: Grand a benefit to the ship, depending on the type of component. A component type can be, for example, shield generator, and the component could then be shield generator 1, 2, 3… Components can either be operational, under construction, or destroyed. In the last two cases they need to be constructed or repaired (which is actually the same thing), and do not grand any benefit to the ship.

===Orders that can be given to owned objects===

* Planets: Add new facility in building queue, change the demanded production rate, build or repair a ship with the inbuilt ship yard.
* Ships: Move to a given position, attack or perform a special action (colonize, load population…). The resupply is automatic if the ship is next to a planet with a resupply depot. Reparations are also automatic if it is next to a ship yard. A ship can be purchased if the player can afford it. 
* Designs: Can be edited if in the state of prototype.
* Components: Some components have a special function which can be ordered, like the self destructing device.

==Research system implementation==

Here is how I’m thinking of implementing a nice research system: As attaining a new technology level basically gives access to one or a couple of new ship components or facilities, it would be simple to add a state to all those objects, called “in research”, with the number of research points needed to obtain the object. Thus, a player will have access to all components and facilities currently not “in research”, and will see which ones he could obtain by investing his research points. If a component is not directly accessible through research (for example, if three technology levels must be completed and the player has completed none), it will be in “unavailable” state, and the player won’t know anything about it. There are also whole branches of research being unknown to the player, which appear when sufficient knowledge in other fields is accumulated. For example, the player can spend research points on “fighter transportation” only when he reached the first level of knowledge in “fighters” technology. Before that, he doesn’t even know about this branch of research. To implement that behavior, the first component of the new unknown branch will be in the “unavailable” state, so the player won’t know about it. It will become in the “in research” state when the player reached the desired level of knowledge in other branches.

==Honor system==

This is an addition to the game I’d really love to implement. It’s mainly inspired by the Utopia game (a famous browser based game). Basically, a player has a total of honor points, and a rank, associated to it. The rank of the player provides him some advantages, and the highest the rank is, the better the advantages become. Honor points will periodically decrease (or increase if the player has less than the average 3500 points), so a player won’t keep his rank forever if he does nothing to deserve it. For a player to obtain honor, he has to achieve glorious victories over his enemies. For example, if he wins an almost equal ship battle, it would earn him much honor. However, he might lose some honor if he uses a big cruiser fleet to attack a colonizer ship or a population transporter. 
Unlike in Utopia though, honor is created, not taken. The loser of an important battle won’t lose any honor. One has to perform really dishonorable actions to lose honor.

===Honor ranks===

Here is a first draft of which ranks would exist and their associated advantages:
* Traitor: Less than 1000 honor points. 25% more efficiency for offensive intelligence operations (espionage and sabotage). 25% more ship combat efficiency during an uneven battle.
* Dirty player: Between 1000 and 2999 honor points. 10% more efficiency for offensive intelligence operations. 10% more ship combat efficiency during an uneven battle.
* Dishonorable: Between 3000 and 3499 honor points. 
* Honorable: Between 3500 and 3999 honor points.
* Trustworthy: Between 4000 and 5999 honor points. 10% more efficiency for defensive intelligence operations. 10% more ship combat efficiency during an even battle.
* Noble: Between 6000 and 6999 honor points. 25% more efficiency for defensive intelligence operations. 25% more ship combat efficiency during an even battle.

Honor points range between 0 and 6999, and the gain/loss of these points become more difficult when getting towards the extremes. The “honorable” and “dishonorable” ranks are transition ranks and don’t give any particular advantage or disadvantage.

===Honor balance===


First of all, the advantages given by honor ranks are not excessively high. In SEIII, similar advantages can be chosen as racial bonus in the beginning of the game (I chose not to implement these bonuses). I see these ranks as a way of playing. The goal is not, like in Utopia, to encourage even battles and discourage dishonorable players, but rather to give related advantages to each of those players. 

Also, as it is easier to win uneven battles, losing honor points that way is slower than gaining some by winning even battles. In fact, the traitor rank gives similar advantages to the noble rank, so reaching both should take just as long.

==Experience==

==End of turn processing==

Here are the different things happening at the end of the turn. The order is not really important here, except maybe for intelligence operations, which may damage ships and should come last. 

* Ship movements, special actions and battles.
* Point production.
* Population growth.
* Construction of facilities.
* Ship repairs.
* Spending of research points, unlocking of new components.
* Intelligence operations.


==Winning conditions==

SEIII provides a great deal of winning conditions from which to choose from at the beginning f a new game. For example, a player can win if his score is X percent superior to any other player, has the highest score after X years, is the first to reach X score level, has researched X number of technologies… I don’t feel like implementing all of these, and will probably only have a “total conquest” victory. In my opinion, this way to win truly demonstrates you were the best player in the game. The other victory conditions don’t demonstrate this as good, that’s why I won’t implement them. Also, I prefer the game to last longer. I think it’s more interesting to fight until the very end, and it’s more rewarding too. I could even play without victory conditions at all, but I guess that’s just me.



==Clustering the rules==

The start of the project is to cluster the rules of SEIII into categories (or layers as I’ll call them). These layers are ordered by importance, and any layer should not depend on the next one. This way, I’ll be able to implement and fully test one layer at a time, incrementally. Here is how I would cluster the rules:
* Layer 1: 	
** Planets and systems, with worm holes. Planet characteristics (size, value, population growth and happiness, atmosphere) are all there.
** Facilities: Only construction centers, space ports, and maybe ship yards as facilities too (they wouldn’t take up space on the planet though).
** Notion of points (only construction so far) and point storage.
** Ships: Only some pre-built designs, no customization. 
** Simple combat system (no tactical combat).
* Layer 2:
** Add all the usual facility types, but no planetary battles (no troops….), and no intelligence.
** Add real components to ships, which can then be customized at will.
** Research unlocks new or better ship components, as well as sizes and types.
** Real damage system of SEIII: destruction of individual components of a ship.
* Layer 3:
** Add a complete research system, with plenty of levels.
** Add intelligence operations.
** Add the honor system.

==Road map==

With these layers in mind, here’s a detailed schedule for the project:

* Week 1 (starting 2008-04-14): Set up the basics to start coding, make sure layer 1 is coherent and ready to be implemented.
* Week 2 (starting 2008-04-21): Start implementing layer 1, object after object. Implement Systems, planets and facilities. Systems and planets will be created when the game is started, and a player will be able to build facilities on his home planet. 
* Week 3 (starting 2008-04-28): Implement ships, basic designs and components. A player will be able to purchase various ships, to explore other systems and to colonize other planets.
* Week 4 (starting 2008-05-05): Implement the basic combat system, and other details left in layer 1. Two players will be able to fight against each other with their ships.
* Week 5 (starting 2008-05-12): Start preparing for the exams.
* Week 11 and 12 (starting 2008-06-23): Exams probably finished (there is no precise exam schedule available at the moment), start thoroughly test layer 1 implementation, and make it coherent as a game. A complete layer 1 implementation should be over by the end of week 12, if everything goes as planned. This means that it will be possible to play the game made of layer 1’s rules entirely, with a minimum of bugs, and that all the combinations of previously available rules will work fine.
* Week 13 (starting 2008-07-07): Final week before first deadline, used to tweak the code before submission. It can be used to finish testing in case of unplanned delay, or to add a trivial research system if everything else went fine.
* Week 14 (starting 2008-07-14): Start implementing layer 2. First implement additional facilities, components, customizable designs and research of new components. Mainly, a player will be able to create his own designs by combining the various available components, and to use them to build new ships. Additionally, he will be able to build research centers on his planets, and use the generated research points to unlock new ship components.
* Week 15 (starting 2008-07-21): Implement component damaging combat system and test the whole layer 2. The game made of layer 2’s rules will be fully playable. Additionally to the previous implementations, the new combat system will be available: during a battle between ships, a weapon hit against a ship will destroy some of its components. If a weapon is destroyed, it won’t be operational anymore (including during the current battle). If a reactor is damaged, he ship will move slower, if it survives the current battle. 
* Week 16 (starting 2008-07-28): Start implementing layer 3. First implement a full intelligence system then add more research levels. A player will be able to build intelligence centers on his planets, and use the generated points to either spy on other players (to obtain, for example, their ship designs or locations), perform sabotage actions (destroy their ships or facilities, kill their population…), or defend himself against the actions of other players.
* Week 17 (starting 2008-08-04): Implement the honor system and test the whole layer 3. Make the research system wide, by adding as much levels as time allows. The game made of layer 3’s rules will be fully playable. A player will be able to research through many levels of technology, nearly as much as in the shareware version of SEIII, and will also have a rank, depending on the honor he will gain or lose through battles. This is the final deliverable for this project. If it has not been completed by the end of week 17, it will be during the last week.
* Week 18 (starting 2008-08-11): Thoroughly test what has not yet been tested. If there were delays, finish and test basic features of layer 3.

I clustered the rules in order to give myself some margin. This way, I can have something to deliver for the final deadline even if the coding in the second stage was heavily delayed. If it happens that I cannot finish layer 3 on time, I’ll submit layer 2 for the final deadline, and probably finish it after GSoC. I may also implement more additional rules afterwards if time allows for it.
In the early stages of the project I’ll work on week ends and evenings of week days. It is convenient that all of my university projects will be finished by April 13th. During my exams I’ll try to work on the project too, but on an irregular basis, finding some spare time here and there. After the exams are over I don’t have any planned activities, so I can spend most of my time coding and testing (like on a full time job). Overall, I can’t really foretell how many hours I will spend on the project daily or weekly. I’m often quite passionate about projects I have to work on, so I hardly count the hours spent on it. If things go off track, I shall be determined to get back on schedule as quickly as possible, even if the layers provide some nice margin.

==Personal background==
My name is Boris Iolis (Jabawock on the forum), and I’m in my third year of computer science studies at the ULB (in Brussels). I code mainly in C++, which I am willing to use for the ruleset implementation. I’m interested in this project because it is a way to use all of the knowledge I acquired to make a game that people will actually play (and not just rate like in university), which is really important to me. Combined with the fact that the project is about a game I like a lot, it makes my determination very strong. Also, I feel that it is a great opportunity to discover the world of open source software, which I am not particularly familiar with. 
I don’t have much related experience, except for an ant colony simulation I worked on with a group of people last year. As a turn based simulation, it has common points with 4X games. It was the biggest programming project I worked on, and I learned a lot through it, especially not to underestimate the amount of work. Thinking of a schedule is easy, but things quickly go off track and delays occur. That’s why I divided my project into layers; to ensure that, whatever happens, there will be something coherent to deliver for the deadline.

==Communication==
I understand that communication is very important in this kind of project, so I’ll keep contact with developers of Thousand Parsec as much as possible, to keep them informed of the progress I make. I’ll be active in the mailing list and forum, and creating a blog about the project seems like a good idea too. 
I have a problem with IRC though; I live in a student room, and my internet connection is provided by my university. IRC must be blocked somehow because I can’t connect with any IRC client. There won’t be problems in the second stage of the project though, as I’ll be at my parent’s house and will be able to connect freely from there.

Contact: biolis@ulb.ac.be

==Feedback==
Feel free to leave any comments on this proposal draft. I don’t know what level of detail is necessary; I’ll dig deeper if it’s not enough.  I’m sorry I didn’t have the opportunity to ask more questions about all this before, mostly because I couldn’t get on IRC and was very busy.

----

You say that you have already some some game programming in university, maybe you could put these examples (or any other that you have done) somwhere on the internet if they are relevant to this application.

I guess we all here prefer the dates in ISO standard format, like YYYY-MM-DD. This makes it the most clear which one is month and which one is day.

If you have already explored which ruleset elements (objects, orders, ...) are not doable with current protocol specification (version 3) write this down. Is it OK with version 4 which is in the works? Maybe something will need to be added to TP04 to make it possible to create the fuller ruleset.

Oh yeah, don't forget to mention which language you will use. If I remember correctly it is C++. So that we know for which server this is going to be.
--[[User:JLP|JLP]] 05:33, 25 March 2008 (EDT)

I think it is very good now. You can safely put it into Google WebApp and we will probably continue to polish it from there if needed.